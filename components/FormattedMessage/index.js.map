{"version":3,"sources":["components/FormattedMessage/index.js"],"names":["FormattedMessage","props","message","values","tagName","uid","Math","floor","random","toString","hashedParams","elements","tokenDelimeter","forEach","key","nodes","split","filter","token","map","propTypes","string","isRequired","object","defaultProps","undefined"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;;;IAEqBA,gB;;;;;;;;;;6BACV;AAAA,mBAC8B,KAAKC,KADnC;AAAA,UACCC,OADD,UACCA,OADD;AAAA,UACUC,MADV,UACUA,MADV;AAAA,UACkBC,OADlB,UACkBA,OADlB;;;AAGP,UAAMC,MAAMC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,aAA3B,EAA0CC,QAA1C,CAAmD,EAAnD,CAAZ;AACA,UAAMC,eAAe,EAArB;AACA,UAAMC,WAAW,EAAjB;AACA,UAAMC,yBAAuBP,GAAvB,QAAN;;AAEA,0BAAYF,MAAZ,EAAoBU,OAApB,CAA4B,UAACC,GAAD,EAAS;AACnC,YAAI,2BAAeX,OAAOW,GAAP,CAAf,CAAJ,EAAiC;AAC/BJ,uBAAaI,GAAb,SAAuBF,cAAvB,GAAwCE,GAAxC,GAA8CF,cAA9C;AACAD,mBAASG,GAAT,IAAgBX,OAAOW,GAAP,CAAhB;AACD,SAHD,MAGO;AACLJ,uBAAaI,GAAb,IAAoBX,OAAOW,GAAP,CAApB;AACD;AACF,OAPD;;AASA,UAAMC,QAAQ,6BAAOb,OAAP,EAAgBQ,YAAhB,EACXM,KADW,CACLJ,cADK,EAEXK,MAFW,CAEJ;AAAA,eAAS,CAAC,CAACC,KAAX;AAAA,OAFI,EAGXC,GAHW,CAGP;AAAA,eAASR,SAASO,KAAT,KAAmBA,KAA5B;AAAA,OAHO,CAAd;AAIA,aAAO,uCAAcd,OAAd,EAAuB,IAAvB,0CAAgCW,KAAhC,GAAP;AACD;;;;;kBAvBkBf,gB;;;AA0BrBA,iBAAiBoB,SAAjB,GAA6B;AAC3BlB,WAAS,oBAAUmB,MAAV,CAAiBC,UADC;AAE3BnB,UAAQ,oBAAUoB,MAFS;AAG3BnB,WAAS,oBAAUiB;AAHQ,CAA7B;AAKArB,iBAAiBwB,YAAjB,GAAgC;AAC9BrB,UAAQsB,SADsB;AAE9BrB,WAAS;AAFqB,CAAhC","file":"index.js","sourcesContent":["import { createElement, isValidElement, Component } from 'react';\nimport PropTypes from 'prop-types';\nimport format from 'format-message';\n\nexport default class FormattedMessage extends Component {\n  render() {\n    const { message, values, tagName } = this.props;\n\n    const uid = Math.floor(Math.random() * 0x10000000000).toString(16);\n    const hashedParams = {};\n    const elements = {};\n    const tokenDelimeter = `@__${uid}__@`;\n\n    Object.keys(values).forEach((key) => {\n      if (isValidElement(values[key])) {\n        hashedParams[key] = `${tokenDelimeter}${key}${tokenDelimeter}`;\n        elements[key] = values[key];\n      } else {\n        hashedParams[key] = values[key];\n      }\n    });\n\n    const nodes = format(message, hashedParams)\n      .split(tokenDelimeter)\n      .filter(token => !!token)\n      .map(token => elements[token] || token);\n    return createElement(tagName, null, ...nodes);\n  }\n}\n\nFormattedMessage.propTypes = {\n  message: PropTypes.string.isRequired,\n  values: PropTypes.object,\n  tagName: PropTypes.string,\n};\nFormattedMessage.defaultProps = {\n  values: undefined,\n  tagName: 'span',\n};\n"]}