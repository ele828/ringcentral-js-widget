{"version":3,"sources":["components/Environment/index.js"],"names":["Environment","props","state","hidden","serverValue","server","recordingHostValue","recordingHost","enabledValue","enabled","onServerChange","e","setState","currentTarget","value","onRecordingHostChange","onToggleEnabled","onOk","onSetData","toggleEnv","onCancel","window","nextProps","hasChanges","root","content","saveButton","disabled","propTypes","string","isRequired","bool","func"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport styles from './styles.scss';\n\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport Line from '../Line';\nimport IconLine from '../IconLine';\nimport TextInput from '../TextInput';\nimport Switch from '../Switch';\nimport Button from '../Button';\nimport Revert from '../../assets/images/Revert.svg';\nimport dynamicsFonts from '../../assets/DynamicsFont/DynamicsFont.scss';\n\n\n/**\n * Environment component for switching api server. Intended only for testing.\n * This component current does not comply to use redux properly.\n */\n\nclass Environment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hidden: true,\n      serverValue: props.server,\n      recordingHostValue: props.recordingHost,\n      enabledValue: props.enabled,\n    };\n\n    this.onServerChange = (e) => {\n      this.setState({\n        serverValue: e.currentTarget.value,\n      });\n    };\n    this.onRecordingHostChange = (e) => {\n      this.setState({\n        recordingHostValue: e.currentTarget.value,\n      });\n    };\n    this.onToggleEnabled = (e) => {\n      this.setState({\n        enabledValue: !this.state.enabledValue,\n      });\n    };\n    this.onOk = () => {\n      this.props.onSetData({\n        server: this.state.serverValue,\n        recordingHost: this.state.recordingHostValue,\n        enabled: this.state.enabledValue,\n      });\n      this.toggleEnv();\n    };\n    this.onCancel = () => {\n      this.setState({\n        serverValue: this.props.server,\n        recordingHostValue: this.props.recordingHost,\n        enabledValue: this.props.enabled,\n      });\n      this.toggleEnv();\n    };\n    this.toggleEnv = () => {\n      this.setState({\n        hidden: !this.state.hidden,\n      });\n    };\n    if (typeof window !== 'undefined') {\n      window.toggleEnv = this.toggleEnv;\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.server !== this.props.server) {\n      this.setState({\n        serverValue: nextProps.server,\n      });\n    }\n    if (nextProps.recordingHost !== this.props.recordingHost) {\n      this.setState({\n        recordingHostValue: nextProps.recordingHost,\n      });\n    }\n    if (nextProps.enabled !== this.props.enabled) {\n      this.setState({\n        enabledValue: nextProps.enabled,\n      });\n    }\n  }\n  render() {\n    if (this.state.hidden) {\n      return null;\n    }\n    const hasChanges = !(\n      this.state.serverValue === this.props.server &&\n      this.state.enabledValue === this.props.enabled &&\n      this.state.recordingHostValue === this.props.recordingHost\n    );\n    return (\n      <div className={styles.root}>\n        <BackHeader\n          onBackClick={this.onCancel}\n          buttons={[]}\n        >\n          Environment\n        </BackHeader>\n        <Panel classname={styles.content}>\n          <Line>\n            Server\n            <TextInput\n              value={this.state.serverValue}\n              onChange={this.onServerChange}\n            />\n          </Line>\n          <Line>\n            Recording Host\n            <TextInput\n              value={this.state.recordingHostValue}\n              onChange={this.onRecordingHostChange}\n            />\n          </Line>\n          <IconLine\n            icon={\n              <Switch\n                checked={this.state.enabledValue}\n                onChange={this.onToggleEnabled}\n              />\n            }\n          >\n            Enable\n          </IconLine>\n          <Line>\n            <Button\n              className={classnames(styles.saveButton, !hasChanges ? styles.disabled : null)}\n              onClick={this.onOk}\n              disabled={!hasChanges}\n            >\n              Save\n            </Button>\n          </Line>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nEnvironment.propTypes = {\n  server: PropTypes.string.isRequired,\n  recordingHost: PropTypes.string.isRequired,\n  enabled: PropTypes.bool.isRequired,\n  onSetData: PropTypes.func.isRequired,\n};\n\nexport default Environment;\n"]}