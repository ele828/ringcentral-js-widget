{"version":3,"sources":["components/ConversationPanel/index.js"],"names":["ConversationPanel","props","onSelectContact","value","idx","selected","parseInt","_userSelection","setState","conversation","conversationMatches","length","autoLog","logConversation","redirect","prefill","getSelectedContact","state","contactMatches","correspondentMatches","bind","textValue","getInitialContactIndex","isLogging","onTextChange","e","currentTarget","handleSubmit","replyToReceivers","preventDefault","onTextAreaKeyDown","key","_mounted","nextProps","lastMatchedCorrespondentEntity","index","findIndex","contact","id","correspondents","phoneNumber","extensionNumber","undefined","groupNumbers","map","correspondent","name","onLogConversation","correspondentEntity","conversationId","conversationBody","loading","showSpinner","recipients","spinerContainer","messages","dateTimeFormatter","getGroupPhoneNumbers","getPhoneNumber","fallbackName","getFallbackContactName","logButton","disableLinks","currentLocale","root","header","contactDisplay","contactDisplaySelect","areaCode","countryCode","enableContactFallback","goBack","backButton","arrow","messageForm","textField","getString","submitField","submitButton","sendButtonDisabled","propTypes","func","isRequired","arrayOf","shape","string","bool","object","defaultProps","isLoggedContact"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\n\nimport Spinner from '../Spinner';\nimport ConversationMessageList from '../ConversationMessageList';\nimport LogButton from '../LogButton';\nimport ContactDisplay from '../ContactDisplay';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nclass ConversationPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textValue: '',\n      selected: this.getInitialContactIndex(),\n      isLogging: false,\n\n    };\n    this._userSelection = false;\n    this.onTextChange = (e) => {\n      this.setState({\n        textValue: e.currentTarget.value,\n      });\n    };\n    this.handleSubmit = (e) => {\n      this.props.replyToReceivers(this.state.textValue);\n      this.setState({\n        textValue: '',\n      });\n      e.preventDefault();\n    };\n    this.onTextAreaKeyDown = (e) => {\n      if (e.key === 'Enter') {\n        this.props.replyToReceivers(this.state.textValue);\n        this.setState({\n          textValue: '',\n        });\n        e.preventDefault();\n      }\n    };\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this._userSelection &&\n      (\n        nextProps.conversation.conversationMatches !==\n        this.props.conversation.conversationMatches ||\n        nextProps.conversation.correspondentMatches !==\n        this.props.conversation.correspondentMatches\n      )\n    ) {\n      this.setState({\n        selected: this.getInitialContactIndex(nextProps),\n      });\n    }\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onSelectContact = (value, idx) => {\n    const selected = parseInt(idx, 10) - 1;\n    this._userSelection = true;\n    this.setState({\n      selected,\n    });\n    if (\n      this.props.conversation.conversationMatches.length > 0 &&\n      this.props.autoLog\n    ) {\n      this.logConversation({ redirect: false, selected, prefill: false });\n    }\n  }\n  getSelectedContact = (selected = this.state.selected) => {\n    const contactMatches = this.props.conversation.correspondentMatches;\n    return (selected > -1 && contactMatches[selected]) ||\n      (contactMatches.length === 1 && contactMatches[0]) ||\n      null;\n  }\n  getInitialContactIndex(nextProps = this.props) {\n    const {\n      correspondentMatches,\n      lastMatchedCorrespondentEntity,\n    } = nextProps.conversation;\n    if (lastMatchedCorrespondentEntity) {\n      const index = correspondentMatches.findIndex(contact => (\n        contact.id === lastMatchedCorrespondentEntity.id\n      ));\n      if (index > -1) return index;\n    }\n    return -1;\n  }\n  getPhoneNumber() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].phoneNumber || correspondents[0].extensionNumber)) || undefined;\n  }\n  getGroupPhoneNumbers() {\n    const correspondents = this.props.conversation.correspondents;\n    const groupNumbers = correspondents.length > 1 ?\n      correspondents.map(correspondent =>\n        correspondent.extensionNumber || correspondent.phoneNumber || undefined\n      )\n      : null;\n    return groupNumbers;\n  }\n  getFallbackContactName() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].name)) || undefined;\n  }\n  async logConversation({ redirect = true, selected, prefill = true }) {\n    if (typeof this.props.onLogConversation === 'function' &&\n      this._mounted &&\n      !this.state.isLogging\n    ) {\n      this.setState({\n        isLogging: true,\n      });\n      await this.props.onLogConversation({\n        correspondentEntity: this.getSelectedContact(selected),\n        conversationId: this.props.conversation.conversationId,\n        redirect,\n        prefill,\n      });\n      if (this._mounted) {\n        this.setState({\n          isLogging: false,\n        });\n      }\n    }\n  }\n  logConversation = this.logConversation.bind(this)\n\n  render() {\n    let conversationBody = null;\n    const loading = this.props.showSpinner;\n    const recipients = this.props.recipients;\n    if (loading) {\n      conversationBody = (\n        <div className={styles.spinerContainer}>\n          <Spinner />\n        </div>\n      );\n    } else {\n      conversationBody = (\n        <ConversationMessageList\n          messages={this.props.messages}\n          className={styles.conversationBody}\n          dateTimeFormatter={this.props.dateTimeFormatter}\n          showFrom={recipients && recipients.length > 1}\n        />\n      );\n    }\n    const {\n      isLogging,\n      conversationMatches,\n      correspondentMatches,\n    } = this.props.conversation;\n    const groupNumbers = this.getGroupPhoneNumbers();\n    const phoneNumber = this.getPhoneNumber();\n    const fallbackName = this.getFallbackContactName();\n\n    const logButton = this.props.onLogConversation ?\n      (\n        <LogButton\n          className={styles.logButton}\n          onLog={this.logConversation}\n          disableLinks={this.props.disableLinks}\n          isLogged={conversationMatches.length > 0}\n          isLogging={isLogging || this.state.isLogging}\n          currentLocale={this.props.currentLocale}\n        />\n      ) :\n      null;\n    return (\n      <div className={styles.root}>\n        <div className={styles.header}>\n          <ContactDisplay\n            className={styles.contactDisplay}\n            selectClassName={styles.contactDisplaySelect}\n            contactMatches={correspondentMatches}\n            selected={this.state.selected}\n            onSelectContact={this.onSelectContact}\n            disabled={this.props.disableLinks}\n            isLogging={isLogging || this.state.isLogging}\n            fallBackName={fallbackName}\n            areaCode={this.props.areaCode}\n            countryCode={this.props.countryCode}\n            phoneNumber={phoneNumber}\n            groupNumbers={groupNumbers}\n            currentLocale={this.props.currentLocale}\n            enableContactFallback={this.props.enableContactFallback}\n          />\n          <a\n            onClick={() => this.props.goBack()}\n            className={styles.backButton}\n          >\n            <span className={dynamicsFont.arrow} />\n          </a>\n          {logButton}\n        </div>\n        {conversationBody}\n        <div className={styles.messageForm}>\n          <form onSubmit={this.handleSubmit}>\n            <div className={styles.textField}>\n              <textarea\n                placeholder={i18n.getString('typeMessage', this.props.currentLocale)}\n                value={this.state.textValue}\n                maxLength=\"1000\"\n                onChange={this.onTextChange}\n                onKeyPressCapture={this.onTextAreaKeyDown}\n              />\n            </div>\n            <div className={styles.submitField}>\n              <input\n                type=\"submit\"\n                value={i18n.getString('send', this.props.currentLocale)}\n                className={styles.submitButton}\n                disabled={\n                  this.props.disableLinks ||\n                  this.props.sendButtonDisabled ||\n                  loading ||\n                  this.state.textValue.length === 0\n                }\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nConversationPanel.propTypes = {\n  replyToReceivers: PropTypes.func.isRequired,\n  messages: ConversationMessageList.propTypes.messages,\n  recipients: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string,\n    extensionNumber: PropTypes.string,\n    name: PropTypes.string,\n  })).isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  showSpinner: PropTypes.bool.isRequired,\n  disableLinks: PropTypes.bool,\n  conversation: PropTypes.object.isRequired,\n  onLogConversation: PropTypes.func,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  autoLog: PropTypes.bool,\n  enableContactFallback: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  goBack: PropTypes.func.isRequired,\n};\nConversationPanel.defaultProps = {\n  disableLinks: false,\n  isLoggedContact: undefined,\n  onLogConversation: undefined,\n  autoLog: false,\n  enableContactFallback: undefined,\n};\n\nexport default ConversationPanel;\n"]}