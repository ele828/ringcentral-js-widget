{"version":3,"sources":["components/WebphoneAlert/index.js"],"names":["WebphoneAlert","props","message","view","getString","currentLocale","recordError","errorCode","payload","propTypes","string","isRequired","shape","handleMessage","browserNotSupported","webphoneCountOverLimit","notOutboundCallWithoutDL","toVoiceMailError","connected","muteError","holdError","flipError","recordDisabled","transferError"],"mappings":";;;;;kBAMwBA,a;;AANxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAC3C,MAAMC,UAAUD,MAAMC,OAAN,CAAcA,OAA9B;AACA,MAAIC,OAAQ;AAAA;AAAA;AAAO,mBAAKC,SAAL,CAAeF,OAAf,EAAwBD,MAAMI,aAA9B;AAAP,GAAZ;AACA;AACA,MAAIH,YAAY,yBAAeI,WAA/B,EAA4C;AAC1C,QAAMC,YAAYN,MAAMC,OAAN,CAAcM,OAAd,CAAsBD,SAAxC;AACAJ,WACE;AACE,eAAS,eAAKC,SAAL,CAAeF,OAAf,EAAwBD,MAAMI,aAA9B,CADX;AAEE,cAAQ,EAAEE,oBAAF;AAFV,MADF;AAMD;AACD,SAAOJ,IAAP;AACD;;AAEDH,cAAcS,SAAd,GAA0B;AACxBJ,iBAAe,oBAAUK,MAAV,CAAiBC,UADR;AAExBT,WAAS,oBAAUU,KAAV,CAAgB;AACvBV,aAAS,oBAAUQ,MAAV,CAAiBC;AADH,GAAhB,EAENA;AAJqB,CAA1B;;AAOAX,cAAca,aAAd,GAA8B;AAAA,MAAGX,OAAH,QAAGA,OAAH;AAAA,SAC3BA,YAAY,yBAAeY,mBAA5B,IACCZ,YAAY,yBAAea,sBAD5B,IAECb,YAAY,yBAAec,wBAF5B,IAGCd,YAAY,yBAAee,gBAH5B,IAICf,YAAY,yBAAegB,SAJ5B,IAKChB,YAAY,yBAAeiB,SAL5B,IAMCjB,YAAY,yBAAekB,SAN5B,IAOClB,YAAY,yBAAemB,SAP5B,IAQCnB,YAAY,yBAAeI,WAR5B,IASCJ,YAAY,yBAAeoB,cAT5B,IAUCpB,YAAY,yBAAeqB,aAXA;AAAA,CAA9B","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport webphoneErrors from 'ringcentral-integration/modules/Webphone/webphoneErrors';\nimport FormattedMessage from '../FormattedMessage';\nimport i18n from './i18n';\n\nexport default function WebphoneAlert(props) {\n  const message = props.message.message;\n  let view = (<span>{i18n.getString(message, props.currentLocale)}</span>);\n  // Handle call record error\n  if (message === webphoneErrors.recordError) {\n    const errorCode = props.message.payload.errorCode;\n    view = (\n      <FormattedMessage\n        message={i18n.getString(message, props.currentLocale)}\n        values={{ errorCode }}\n      />\n    );\n  }\n  return view;\n}\n\nWebphoneAlert.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  message: PropTypes.shape({\n    message: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nWebphoneAlert.handleMessage = ({ message }) => (\n  (message === webphoneErrors.browserNotSupported) ||\n  (message === webphoneErrors.webphoneCountOverLimit) ||\n  (message === webphoneErrors.notOutboundCallWithoutDL) ||\n  (message === webphoneErrors.toVoiceMailError) ||\n  (message === webphoneErrors.connected) ||\n  (message === webphoneErrors.muteError) ||\n  (message === webphoneErrors.holdError) ||\n  (message === webphoneErrors.flipError) ||\n  (message === webphoneErrors.recordError) ||\n  (message === webphoneErrors.recordDisabled) ||\n  (message === webphoneErrors.transferError)\n);\n"]}