{"version":3,"sources":["components/RecentActivityMessages/index.js"],"names":["cx","bind","MessageItem","message","navigateTo","dateTimeFormatter","subject","creationTime","readStatus","conversationId","isUnread","time","utcTimestamp","localMessageItem","fromRemote","dl","unread","propTypes","object","isRequired","func","RecentActivityMessages","nextProps","currentLocale","props","messages","isMessagesLoaded","messageListView","spinner","length","map","id","noRecords","getString","string","array","bool"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport Spinner from '../Spinner';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nconst cx = classNames.bind(styles);\nfunction MessageItem({ message, navigateTo, dateTimeFormatter }) {\n  const { subject, creationTime, readStatus, conversationId } = message;\n  const isUnread = readStatus !== 'Read';\n  const time = dateTimeFormatter({ utcTimestamp: creationTime });\n  return (\n    <div\n      className={cx('messageItem', { localMessageItem: !message.fromRemote })}\n      onClick={() => !message.fromRemote && navigateTo(`/conversations/${conversationId}`)}\n    >\n      <dl className={styles.dl}>\n        <dt className={cx('messageSubject', { unread: isUnread })} title={subject}>{subject}</dt>\n        <dd className={cx('messageTime', { unread: isUnread })} title={time}>{time}</dd>\n      </dl>\n    </div>\n  );\n}\n\nMessageItem.propTypes = {\n  message: PropTypes.object.isRequired,\n  navigateTo: PropTypes.func.isRequired,\n  dateTimeFormatter: PropTypes.func.isRequired\n};\n\nexport default class RecentActivityMessages extends Component {\n  shouldComponentUpdate(nextProps) {\n    return nextProps.currentLocale !== this.props.currentLocale ||\n      nextProps.messages !== this.props.messages ||\n      nextProps.isMessagesLoaded !== this.props.isMessagesLoaded;\n  }\n\n  render() {\n    const {\n      currentLocale,\n      messages,\n      isMessagesLoaded,\n      navigateTo,\n      dateTimeFormatter\n    } = this.props;\n    let messageListView = null;\n    if (!isMessagesLoaded) {\n      messageListView = (<Spinner className={styles.spinner} ringWidth={4} />);\n    } else if (messages.length > 0) {\n      messageListView = messages.map(message => (\n        <MessageItem\n          key={message.id}\n          message={message}\n          navigateTo={navigateTo}\n          dateTimeFormatter={dateTimeFormatter}\n        />\n      ));\n    } else {\n      messageListView = (<p className={styles.noRecords}>{i18n.getString('noRecords', currentLocale)}</p>);\n    }\n    return (\n      <div className={styles.messages}>\n        {messageListView}\n      </div>\n    );\n  }\n}\n\nRecentActivityMessages.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  messages: PropTypes.array.isRequired,\n  isMessagesLoaded: PropTypes.bool.isRequired,\n  navigateTo: PropTypes.func.isRequired,\n  dateTimeFormatter: PropTypes.func.isRequired\n};\n"]}