{"version":3,"sources":["components/ComposeTextPanel/index.js"],"names":["SenderField","props","getString","currentLocale","senderSelect","value","onChange","options","formatPhone","propTypes","string","isRequired","func","arrayOf","ComposeTextPanel","onSenderChange","updateSenderNumber","onReceiverChange","e","currentTarget","updateTypingToNumber","cleanReceiverValue","cleanTypingToNumber","onReceiverInputKeyUp","searchContact","addToRecipients","receiver","shouldClean","addToNumber","removeFromRecipients","phoneNumber","removeToNumber","onTextChange","updateMessageText","onTextAreaKeyDown","console","debug","key","preventDefault","send","handleSubmit","senderNumbers","length","showSpinner","root","className","senderField","hasSenderNumbers","senderNumber","outboundSMS","receiverField","typingToNumber","toNumbers","searchContactList","formatContactPhone","buttomField","textField","messageText","submitField","submitButton","sendButtonDisabled","bool","shape","name","entityType","phoneType","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport i18n from './i18n';\nimport styles from './styles.scss';\nimport RecipientsInput from '../RecipientsInput';\nimport Select from '../DropdownSelect';\nimport SpinnerOverlay from '../SpinnerOverlay';\nimport NoSenderAlert from './NoSenderAlert';\n\n\nfunction SenderField(props) {\n  return (\n    <Select\n      label={`${i18n.getString('from', props.currentLocale)}:`}\n      className={styles.senderSelect}\n      value={props.value}\n      onChange={props.onChange}\n      options={props.options}\n      paddingLeft={0}\n      renderValue={props.formatPhone}\n      valueFunction={value => value}\n      renderFunction={props.formatPhone}\n    />\n  );\n}\n\nSenderField.propTypes = {\n  currentLocale: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n};\n\n\nclass ComposeTextPanel extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSenderChange = (value) => {\n      this.props.updateSenderNumber(value);\n    };\n\n    this.onReceiverChange = (e) => {\n      const value = e.currentTarget.value;\n      this.props.updateTypingToNumber(value);\n    };\n\n    this.cleanReceiverValue = () => {\n      this.props.cleanTypingToNumber();\n    };\n\n    this.onReceiverInputKeyUp = (e) => {\n      this.props.searchContact(e.currentTarget.value);\n    };\n\n    this.addToRecipients = (receiver, shouldClean = true) => {\n      this.props.addToNumber(receiver);\n      if (shouldClean) {\n        this.props.cleanTypingToNumber();\n      }\n    };\n\n    this.removeFromRecipients = (phoneNumber) => {\n      this.props.removeToNumber({ phoneNumber });\n    };\n\n    this.onTextChange = (e) => {\n      const value = e.currentTarget.value;\n      this.props.updateMessageText(value);\n    };\n\n    this.onTextAreaKeyDown = (e) => {\n      console.debug('onTextAreaKeyDown', e);\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        this.props.send();\n      }\n    };\n\n    this.handleSubmit = (e) => {\n      e.preventDefault();\n      this.props.send();\n      console.debug('send message ...');\n    };\n  }\n\n  hasSenderNumbers() {\n    return this.props.senderNumbers.length > 0;\n  }\n\n  render() {\n    if (this.props.showSpinner) {\n      return (\n        <div className={classnames(styles.root, this.props.className)}>\n          <SpinnerOverlay />\n        </div>\n      );\n    }\n    const senderField = this.hasSenderNumbers() ?\n      (\n        <SenderField\n          currentLocale={this.props.currentLocale}\n          value={this.props.senderNumber}\n          options={this.props.senderNumbers}\n          formatPhone={this.props.formatPhone}\n          onChange={this.onSenderChange}\n        />\n      ) : null;\n    return (\n      <div className={classnames(styles.root, this.props.className)}>\n        <NoSenderAlert\n          currentLocale={this.props.currentLocale}\n          outboundSMS={this.props.outboundSMS}\n          hasSenderNumbers={this.hasSenderNumbers()}\n        />\n        <form onSubmit={this.handleSubmit}>\n          <div className={styles.receiverField}>\n            <RecipientsInput\n              value={this.props.typingToNumber}\n              label={`${i18n.getString('to', this.props.currentLocale)}:`}\n              onChange={this.onReceiverChange}\n              onClean={this.cleanReceiverValue}\n              placeholder={i18n.getString('enterNameOrNumber', this.props.currentLocale)}\n              recipients={this.props.toNumbers}\n              addToRecipients={this.addToRecipients}\n              removeFromRecipients={this.removeFromRecipients}\n              searchContactList={this.props.searchContactList}\n              onKeyUp={this.onReceiverInputKeyUp}\n              formatContactPhone={this.props.formatContactPhone}\n              titleEnabled\n            />\n          </div>\n          <div className={styles.senderField}>\n            {senderField}\n          </div>\n          <div className={styles.buttomField}>\n            <div className={styles.textField}>\n              <textarea\n                placeholder={i18n.getString('typeMessage', this.props.currentLocale)}\n                value={this.props.messageText}\n                maxLength=\"1000\"\n                onChange={this.onTextChange}\n                onKeyPressCapture={this.onTextAreaKeyDown}\n              />\n            </div>\n            <div className={styles.submitField}>\n              <input\n                type=\"submit\"\n                value={i18n.getString('send', this.props.currentLocale)}\n                className={styles.submitButton}\n                disabled={this.props.sendButtonDisabled}\n              />\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nComposeTextPanel.propTypes = {\n  className: PropTypes.string,\n  send: PropTypes.func.isRequired,\n  senderNumbers: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  sendButtonDisabled: PropTypes.bool.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  formatContactPhone: PropTypes.func.isRequired,\n  searchContact: PropTypes.func.isRequired,\n  searchContactList: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    entityType: PropTypes.string.isRequired,\n    phoneType: PropTypes.string.isRequired,\n    phoneNumber: PropTypes.string.isRequired,\n  })).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  updateSenderNumber: PropTypes.func.isRequired,\n  updateTypingToNumber: PropTypes.func.isRequired,\n  cleanTypingToNumber: PropTypes.func.isRequired,\n  addToNumber: PropTypes.func.isRequired,\n  removeToNumber: PropTypes.func.isRequired,\n  updateMessageText: PropTypes.func.isRequired,\n  messageText: PropTypes.string,\n  typingToNumber: PropTypes.string,\n  senderNumber: PropTypes.string,\n  toNumbers: PropTypes.arrayOf(PropTypes.shape({\n    phoneNumber: PropTypes.string.isRequired,\n    name: PropTypes.string,\n  })).isRequired,\n  outboundSMS: PropTypes.bool,\n  showSpinner: PropTypes.bool,\n};\n\nComposeTextPanel.defaultProps = {\n  className: null,\n  messageText: '',\n  typingToNumber: '',\n  senderNumber: '',\n  outboundSMS: false,\n  showSpinner: false,\n};\n\nexport default ComposeTextPanel;\n"]}