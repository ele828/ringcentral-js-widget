{"version":3,"sources":["components/RegionSettingsPanel/index.js"],"names":["RegionSettings","props","onAreaCodeChange","e","value","currentTarget","setState","areaCodeValue","areaCodeInputFilter","onCountryCodeChange","option","isoCode","state","countryCodeValue","onResetClick","areaCode","countryCode","onSaveClick","onSave","onBackClick","onBackButtonClick","replace","renderHandler","callingCode","getString","currentLocale","renderValue","selectedOption","availableCountries","find","country","nextProps","hasChanges","hasNA","c","messageId","length","showAreaCode","root","className","content","hint","inputField","select","saveButton","disabled","children","propTypes","string","node","func","isRequired","arrayOf","shape","defaultProps","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport InputField from '../InputField';\nimport TextInput from '../TextInput';\nimport Select from '../DropdownSelect';\nimport Button from '../Button';\nimport Revert from '../../assets/images/Revert.svg';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\nimport countryNames from '../../lib/countryNames';\n\nexport default class RegionSettings extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      countryCodeValue: props.countryCode,\n      areaCodeValue: props.areaCode,\n    };\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.areaCode !== this.props.areaCode) {\n      this.setState({\n        areaCodeValue: nextProps.areaCode,\n      });\n    }\n    if (nextProps.countryCode !== this.props.countryCode) {\n      this.setState({\n        countryCodeValue: nextProps.countryCode,\n      });\n    }\n  }\n\n  onAreaCodeChange = (e) => {\n    const value = e.currentTarget.value;\n    this.setState({\n      areaCodeValue: this.areaCodeInputFilter(value),\n    });\n  }\n\n  onCountryCodeChange = (option) => {\n    const value = option.isoCode;\n    if (value !== this.state.countryCodeValue) {\n      this.setState({\n        countryCodeValue: value,\n      });\n    }\n  }\n  onResetClick = () => {\n    this.setState({\n      areaCodeValue: this.props.areaCode,\n      countryCodeValue: this.props.countryCode,\n    });\n  }\n  onSaveClick = () => {\n    if (typeof this.props.onSave === 'function') {\n      this.props.onSave({\n        areaCode: this.state.areaCodeValue,\n        countryCode: this.state.countryCodeValue,\n      });\n    }\n  }\n  onBackClick = () => {\n    if (typeof this.props.onBackButtonClick === 'function') {\n      this.props.onBackButtonClick();\n    }\n  }\n\n  areaCodeInputFilter = value =>\n    value.replace(/[^\\d]/g, '')\n\n  renderHandler = option =>\n    `(+${option.callingCode}) ${countryNames.getString(option.isoCode, this.props.currentLocale)}`\n\n  renderValue = (value) => {\n    const selectedOption = this.props.availableCountries.find(\n      country => country.isoCode === value\n    );\n    if (!selectedOption) {\n      return '';\n    }\n    return `(+${selectedOption.callingCode}) ${countryNames.getString(selectedOption.isoCode, this.props.currentLocale)}`;\n  }\n\n  render() {\n    const hasChanges = this.state.areaCodeValue !== this.props.areaCode ||\n      this.state.countryCodeValue !== this.props.countryCode;\n    const hasNA = !!this.props.availableCountries.find(c => c.isoCode === 'US') ||\n      !!this.props.availableCountries.find(c => c.isoCode === 'CA');\n    let messageId;\n    if (this.props.availableCountries.length > 1) {\n      if (hasNA) {\n        messageId = 'MultiWithNAMessage';\n      } else {\n        messageId = 'MultiWithoutNAMessage';\n      }\n    } else if (hasNA) {\n      messageId = 'NAOnlyMessage';\n    }\n    const showAreaCode = this.state.countryCodeValue === 'US' ||\n      this.state.countryCodeValue === 'CA';\n\n    return (\n      <div className={classnames(styles.root, this.props.className)}>\n        <BackHeader\n          buttons={[]}\n          onBackClick={this.onBackClick}\n          >\n          {i18n.getString('title', this.props.currentLocale)}\n        </BackHeader>\n        <Panel className={styles.content}>\n          <div className={styles.hint}>\n            {i18n.getString(messageId, this.props.currentLocale)}\n          </div>\n          <InputField\n            className={styles.inputField}\n            label={i18n.getString('country', this.props.currentLocale)}>\n            <Select\n              className={styles.select}\n              value={this.state.countryCodeValue}\n              onChange={this.onCountryCodeChange}\n              options={this.props.availableCountries}\n              dropdownAlign=\"left\"\n              valueFunction={option => option.isoCode}\n              renderFunction={this.renderHandler}\n              renderValue={this.renderValue}\n              titleEnabled\n            />\n          </InputField>\n          {showAreaCode && (\n            <InputField\n              className={styles.inputField}\n              label={i18n.getString('areaCode', this.props.currentLocale)}>\n              <TextInput\n                placeholder={i18n.getString('areaCodePlaceholder', this.props.currentLocale)}\n                maxLength={3}\n                filter={this.areaCodeInputFilter}\n                value={this.state.areaCodeValue}\n                onChange={this.onAreaCodeChange} />\n            </InputField>\n          )}\n          <Button\n            className={classnames(styles.saveButton, !hasChanges ? styles.disabled : null)}\n            onClick={this.onSaveClick}\n            disabled={!hasChanges}\n          >\n            {i18n.getString('save', this.props.currentLocale)}\n          </Button>\n          {this.props.children}\n        </Panel>\n      </div>\n    );\n  }\n}\n\nRegionSettings.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  onBackButtonClick: PropTypes.func,\n  currentLocale: PropTypes.string.isRequired,\n  availableCountries: PropTypes.arrayOf(PropTypes.shape({\n    isoCode: PropTypes.string,\n    callingCode: PropTypes.string,\n  })).isRequired,\n  countryCode: PropTypes.string.isRequired,\n  areaCode: PropTypes.string.isRequired,\n  onSave: PropTypes.func,\n};\n\nRegionSettings.defaultProps = {\n  className: undefined,\n  children: undefined,\n  onBackButtonClick: undefined,\n  onSave: undefined,\n};\n"]}