{"version":3,"sources":["components/CallingSettingsPanel/index.js"],"names":["CallingSettingsPanel","props","onSave","state","callWith","myLocation","ringoutPrompt","onReset","setState","onCallWithChange","availableNumbers","onMyLocationChange","onMyLocationTextChange","e","target","value","onRingoutPromptChange","checked","renderHandler","option","brand","getString","currentLocale","newProps","contentKeys","browser","softphone","map","contentKey","callWithOptions","onBackButtonClick","className","disabled","hasChanges","ringout","ringoutHint","inputField","select","iconField","toolTip","getTooltipContent","root","content","offset","tooltipContainner","information","infoIcon","saveButton","propTypes","string","isRequired","arrayOf","bool","object","func","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport formatMessage from 'format-message';\n\nimport callingOptions from 'ringcentral-integration/modules/CallingSettings/callingOptions';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap_white.css';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport Revert from '../../assets/images/Revert.svg';\n\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nimport BackHeader from '../BackHeader';\nimport Panel from '../Panel';\nimport Switch from '../Switch';\nimport IconField from '../IconField';\nimport InputField from '../InputField';\nimport TextInput from '../TextInput';\nimport Select from '../DropdownSelect';\nimport Button from '../Button';\n\nexport default class CallingSettingsPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      callWith: props.callWith,\n      ringoutPrompt: props.ringoutPrompt,\n      myLocation: props.myLocation,\n    };\n  }\n  componentWillReceiveProps(newProps) {\n    if (newProps.callWith !== this.props.callWith) {\n      this.setState({\n        callWith: newProps.callWith,\n      });\n    }\n    if (newProps.ringoutPrompt !== this.props.ringoutPrompt) {\n      this.setState({\n        ringoutPrompt: newProps.ringoutPrompt,\n      });\n    }\n    if (newProps.myLocation !== this.props.myLocation) {\n      this.setState({\n        myLocation: newProps.myLocation,\n      });\n    }\n  }\n  onSave = () => {\n    if (typeof this.props.onSave === 'function') {\n      const {\n        callWith,\n        myLocation,\n        ringoutPrompt,\n      } = this.state;\n      this.props.onSave({\n        callWith,\n        myLocation,\n        ringoutPrompt,\n      });\n    }\n  }\n  onReset = () => {\n    const {\n      callWith,\n      myLocation,\n      ringoutPrompt,\n    } = this.props;\n    this.setState({\n      callWith,\n      myLocation,\n      ringoutPrompt,\n    });\n  }\n  onCallWithChange = (callWith) => {\n    this.setState({\n      callWith,\n      myLocation: (this.props.availableNumbers[callWith] &&\n        this.props.availableNumbers[callWith][0]) ||\n        '',\n    });\n  }\n  onMyLocationChange = (myLocation) => {\n    this.setState({\n      myLocation\n    });\n  }\n  onMyLocationTextChange = (e) => {\n    const myLocation = e.target.value;\n    this.setState({\n      myLocation\n    });\n  }\n  onRingoutPromptChange = (checked) => {\n    this.setState({\n      ringoutPrompt: checked,\n    });\n  }\n\n  getTooltipContent() {\n    let contentKeys;\n    if (this.state.callWith === callingOptions.browser\n      || this.state.callWith === callingOptions.softphone\n    ) {\n      contentKeys = [`${this.state.callWith}Tooltip`];\n    } else {\n      contentKeys = [`${this.state.callWith}Tooltip`, `${this.state.callWith}Tooltip1`];\n    }\n    return (\n      <div>\n        {\n          contentKeys.map(contentKey => (\n            <div key={contentKey}>\n              {formatMessage(\n                i18n.getString(contentKey, this.props.currentLocale),\n                { brand: this.props.brand }\n              )}\n            </div>\n          ))\n        }\n      </div>\n    );\n  }\n\n  renderHandler = (option) => {\n    const brand = this.props.brand;\n    return formatMessage(i18n.getString(option, this.props.currentLocale), { brand });\n  }\n\n  render() {\n    const {\n      currentLocale,\n      callWith,\n      callWithOptions,\n      myLocation,\n      ringoutPrompt,\n      onBackButtonClick,\n      availableNumbers,\n      className,\n      disabled,\n    } = this.props;\n    const hasChanges = this.state.callWith !== callWith ||\n      this.state.myLocation !== myLocation ||\n      this.state.ringoutPrompt !== ringoutPrompt;\n    const ringout =\n      (\n        this.state.callWith !== callingOptions.softphone &&\n        this.state.callWith !== callingOptions.browser\n      ) ? (\n        <div>\n          <div className={styles.ringoutHint}>\n            {i18n.getString('ringoutHint', currentLocale)}\n          </div>\n          <InputField\n            className={styles.inputField}\n            label={i18n.getString('myLocationLabel', currentLocale)}>\n            {\n              availableNumbers[this.state.callWith] ? (\n                <Select\n                  className={styles.select}\n                  value={this.state.myLocation}\n                  onChange={this.onMyLocationChange}\n                  options={availableNumbers[this.state.callWith]}\n                  disabled={disabled}\n                  dropdownAlign=\"left\"\n                  titleEnabled\n                />\n              ) : (\n                <TextInput\n                  value={this.state.myLocation}\n                  maxLength={30}\n                  onChange={this.onMyLocationTextChange} />\n              )\n            }\n          </InputField>\n          <IconField\n            className={styles.iconField}\n            icon={\n              <Switch\n                checked={this.state.ringoutPrompt}\n                onChange={this.onRingoutPromptChange}\n                />\n            }\n            >\n            {i18n.getString('press1ToStartCallLabel', currentLocale)}\n          </IconField>\n        </div>\n      ) : null;\n\n    const toolTip = this.getTooltipContent();\n    return (\n      <div className={classnames(styles.root, className)}>\n        <BackHeader\n          buttons={[]}\n          onBackClick={onBackButtonClick}\n          >\n          {i18n.getString('title', currentLocale)}\n        </BackHeader>\n        <Panel className={styles.content}>\n          <InputField\n            className={styles.inputField}\n            label={\n              <span>\n                {i18n.getString('makeCallsWith', currentLocale)}\n                <Tooltip\n                  placement=\"bottom\"\n                  trigger=\"click\"\n                  overlay={toolTip}\n                  align={{\n                    offset: [0, 47],\n                  }}\n                  arrowContent={<div className=\"rc-tooltip-arrow-inner\" />}\n                  getTooltipContainer={() => this.tooltipContainner}\n                >\n                  <i className={classnames(dynamicsFont.information, styles.infoIcon)} />\n                </Tooltip>\n              </span>\n            }\n            noBorder\n          >\n            <Select\n              className={styles.select}\n              value={this.state.callWith}\n              onChange={this.onCallWithChange}\n              options={callWithOptions}\n              dropdownAlign=\"left\"\n              renderFunction={this.renderHandler}\n              renderValue={this.renderHandler}\n              disabled={disabled}\n              titleEnabled\n            />\n            <div\n              className={styles.tooltipContainner}\n              ref={(tooltipContainner) => {\n                this.tooltipContainner = tooltipContainner;\n              }}\n            />\n          </InputField>\n          {ringout}\n          <Button\n            className={classnames(styles.saveButton, !hasChanges ? styles.disabled : null)}\n            onClick={this.onSave}\n            disabled={!hasChanges}\n          >\n            {i18n.getString('save', currentLocale)}\n          </Button>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nCallingSettingsPanel.propTypes = {\n  brand: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  currentLocale: PropTypes.string.isRequired,\n  callWithOptions: PropTypes.arrayOf(PropTypes.string).isRequired,\n  callWith: PropTypes.string.isRequired,\n  myLocation: PropTypes.string.isRequired,\n  ringoutPrompt: PropTypes.bool.isRequired,\n  availableNumbers: PropTypes.object.isRequired,\n  onBackButtonClick: PropTypes.func.isRequired,\n  onSave: PropTypes.func.isRequired,\n  disabled: PropTypes.bool,\n};\n\nCallingSettingsPanel.defaultProps = {\n  className: null,\n  disabled: false,\n};\n"]}