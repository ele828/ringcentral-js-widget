{"version":3,"sources":["components/MessageItem/index.js"],"names":["ConversationIcon","group","conversationTitle","groupConversationTitle","title","conversationIcon","groupConversation","composeText","propTypes","bool","defaultProps","MessageItem","props","onSelectContact","value","idx","selected","parseInt","_userSelection","setState","conversation","conversationMatches","length","autoLog","logConversation","redirect","prefill","getSelectedContact","state","contactMatches","correspondentMatches","viewSelectedContact","onViewContact","phoneNumber","getPhoneNumber","contact","createSelectedContact","entityType","onCreateContact","_mounted","isCreating","name","enableContactFallback","getFallbackContactName","bind","clickToDial","onClickToDial","showConversationDetail","e","conversationId","getInitialContactIndex","isLogging","nextProps","lastMatchedCorrespondentEntity","index","findIndex","id","correspondents","extensionNumber","undefined","groupNumbers","map","correspondent","onLogConversation","correspondentEntity","areaCode","countryCode","currentLocale","unreadCounts","creationTime","subject","disableLinks","disableClickToDial","dateTimeFormatter","getGroupPhoneNumbers","fallbackName","root","unread","getString","contactDisplay","details","utcTimestamp","shape","string","isRequired","arrayOf","func","isLoggedContact","outboundSmsPermission","internalSmsPermission"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport ContactDisplay from '../ContactDisplay';\nimport ActionMenu from '../ActionMenu';\nimport dynamicsFont from '../../assets/DynamicsFont/DynamicsFont.scss';\nimport styles from './styles.scss';\nimport i18n from './i18n';\n\nfunction ConversationIcon({\n  group,\n  conversationTitle,\n  groupConversationTitle,\n}) {\n  const title = group ? groupConversationTitle : conversationTitle;\n  return (\n    <div className={styles.conversationIcon}>\n      <span\n        className={classnames(\n          group ? dynamicsFont.groupConversation : dynamicsFont.composeText\n        )}\n        title={title}/>\n    </div>\n  );\n}\nConversationIcon.propTypes = {\n  group: PropTypes.bool,\n};\nConversationIcon.defaultProps = {\n  group: false,\n};\n\nexport default class MessageItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: this.getInitialContactIndex(),\n      isLogging: false,\n      isCreating: false,\n    };\n    this._userSelection = false;\n    /* [RCINT-4301] onSelection would trigger some state changes that would push new\n     * properties before the state has been changed. Which would reset the selected value.\n     */\n  }\n  componentDidMount() {\n    this._mounted = true;\n  }\n  componentWillReceiveProps(nextProps) {\n    if (\n      !this._userSelection &&\n      (\n        nextProps.conversation.conversationMatches !==\n        this.props.conversation.conversationMatches ||\n        nextProps.conversation.correspondentMatches !==\n        this.props.conversation.correspondentMatches\n      )\n    ) {\n      this.setState({\n        selected: this.getInitialContactIndex(nextProps),\n      });\n    }\n  }\n  componentWillUnmount() {\n    this._mounted = false;\n  }\n  onSelectContact = (value, idx) => {\n    const selected = parseInt(idx, 10) - 1;\n    this._userSelection = true;\n    this.setState({\n      selected,\n    });\n    if (\n      this.props.conversation.conversationMatches.length > 0 &&\n      this.props.autoLog\n    ) {\n      this.logConversation({ redirect: false, selected, prefill: false });\n    }\n  }\n  getInitialContactIndex(nextProps = this.props) {\n    const {\n      correspondentMatches,\n      lastMatchedCorrespondentEntity,\n    } = nextProps.conversation;\n    if (lastMatchedCorrespondentEntity) {\n      const index = correspondentMatches.findIndex(contact => (\n        contact.id === lastMatchedCorrespondentEntity.id\n      ));\n      if (index > -1) return index;\n    }\n    return -1;\n  }\n  getSelectedContact = (selected = this.state.selected) => {\n    const contactMatches = this.props.conversation.correspondentMatches;\n    return (selected > -1 && contactMatches[selected]) ||\n      (contactMatches.length === 1 && contactMatches[0]) ||\n      null;\n  }\n\n  getPhoneNumber() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].phoneNumber || correspondents[0].extensionNumber)) || undefined;\n  }\n  getGroupPhoneNumbers() {\n    const correspondents = this.props.conversation.correspondents;\n    const groupNumbers = correspondents.length > 1 ?\n      correspondents.map(correspondent =>\n        correspondent.extensionNumber || correspondent.phoneNumber || undefined\n      )\n      : null;\n    return groupNumbers;\n  }\n  getFallbackContactName() {\n    const correspondents = this.props.conversation.correspondents;\n    return (correspondents.length === 1 &&\n      (correspondents[0].name)) || undefined;\n  }\n  viewSelectedContact = () => {\n    if (typeof this.props.onViewContact === 'function') {\n      this.props.onViewContact({\n        phoneNumber: this.getPhoneNumber(),\n        contact: this.getSelectedContact(),\n      });\n    }\n  }\n  createSelectedContact = async (entityType) => {\n    // console.log('click createSelectedContact!!', entityType);\n    if (typeof this.props.onCreateContact === 'function' &&\n      this._mounted &&\n      !this.state.isCreating) {\n      this.setState({\n        isCreating: true,\n      });\n      // console.log('start to create: isCreating...', this.state.isCreating);\n      const phoneNumber = this.getPhoneNumber();\n      await this.props.onCreateContact({\n        phoneNumber,\n        name: this.props.enableContactFallback ? this.getFallbackContactName() : '',\n        entityType,\n      });\n\n      if (this._mounted) {\n        this.setState({\n          isCreating: false,\n        });\n        // console.log('created: isCreating...', this.state.isCreating);\n      }\n    }\n  }\n\n  async logConversation({ redirect = true, selected, prefill = true }) {\n    if (typeof this.props.onLogConversation === 'function' &&\n      this._mounted &&\n      !this.state.isLogging\n    ) {\n      this.setState({\n        isLogging: true,\n      });\n      await this.props.onLogConversation({\n        correspondentEntity: this.getSelectedContact(selected),\n        conversationId: this.props.conversation.conversationId,\n        redirect,\n        prefill,\n      });\n      if (this._mounted) {\n        this.setState({\n          isLogging: false,\n        });\n      }\n    }\n  }\n  logConversation = this.logConversation.bind(this)\n\n  clickToDial = () => {\n    if (this.props.onClickToDial) {\n      this.props.onClickToDial(this.getPhoneNumber());\n    }\n  }\n  showConversationDetail = (e) => {\n    // if (e.captureClick === false) {\n    //   delete e.captureClick;\n    //   return;\n    // }\n    this.props.showConversationDetail(this.props.conversation.conversationId);\n  }\n\n  render() {\n    const {\n      areaCode,\n      countryCode,\n      currentLocale,\n      conversation: {\n        unreadCounts,\n        correspondents,\n        correspondentMatches,\n        creationTime,\n        subject,\n        isLogging,\n        conversationMatches,\n      },\n      disableLinks,\n      disableClickToDial,\n      onClickToDial,\n      onLogConversation,\n      onViewContact,\n      onCreateContact,\n      dateTimeFormatter,\n      enableContactFallback,\n    } = this.props;\n\n    const groupNumbers = this.getGroupPhoneNumbers();\n    const phoneNumber = this.getPhoneNumber();\n    const fallbackName = this.getFallbackContactName();\n\n    return (\n      <div\n        className={classnames(\n          styles.root,\n          unreadCounts && styles.unread\n        )}\n        onClick={this.showConversationDetail}\n      >\n        <ConversationIcon\n          group={correspondents.length > 1}\n          conversationTitle={i18n.getString('conversation', currentLocale)}\n          groupConversationTitle={i18n.getString('groupConversation', currentLocale)}\n        />\n        <ContactDisplay\n          className={classnames(\n            styles.contactDisplay,\n            unreadCounts && styles.unread\n          )}\n          contactMatches={correspondentMatches}\n          selected={this.state.selected}\n          onSelectContact={this.onSelectContact}\n          disabled={disableLinks}\n          isLogging={isLogging || this.state.isLogging}\n          fallBackName={fallbackName}\n          areaCode={areaCode}\n          countryCode={countryCode}\n          phoneNumber={phoneNumber}\n          groupNumbers={groupNumbers}\n          currentLocale={currentLocale}\n          enableContactFallback={enableContactFallback}\n        />\n        <div className={styles.details}>\n          {dateTimeFormatter({ utcTimestamp: creationTime })} | {subject}\n        </div>\n        <ActionMenu\n          currentLocale={currentLocale}\n          onLog={onLogConversation && this.logConversation}\n          onViewEntity={onViewContact && this.viewSelectedContact}\n          onCreateEntity={onCreateContact && this.createSelectedContact}\n          hasEntity={correspondents.length === 1 && !!correspondentMatches.length}\n          onClickToDial={onClickToDial && this.clickToDial}\n          phoneNumber={phoneNumber}\n          disableLinks={disableLinks}\n          disableClickToDial={disableClickToDial}\n          isLogging={isLogging || this.state.isLogging}\n          isLogged={conversationMatches.length > 0}\n          isCreating={this.state.isCreating}\n          addLogTitle={i18n.getString('addLog', currentLocale)}\n          editLogTitle={i18n.getString('editLog', currentLocale)}\n          callTitle={i18n.getString('call', currentLocale)}\n          createEntityTitle={i18n.getString('addEntity', currentLocale)}\n          viewEntityTitle={i18n.getString('viewDetails', currentLocale)}\n          stopPropagation\n        />\n      </div>\n    );\n  }\n}\n\nMessageItem.propTypes = {\n  conversation: PropTypes.shape({\n    conversationId: PropTypes.string.isRequired,\n    isLogging: PropTypes.bool,\n    correspondents: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      extensionNumber: PropTypes.string,\n    })),\n    correspondentMatches: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      entityType: PropTypes.string,\n    })),\n    conversationMatches: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.string,\n    })),\n  }).isRequired,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  onLogConversation: PropTypes.func,\n  onViewContact: PropTypes.func,\n  onCreateContact: PropTypes.func,\n  onClickToDial: PropTypes.func,\n  isLoggedContact: PropTypes.func,\n  disableLinks: PropTypes.bool,\n  disableClickToDial: PropTypes.bool,\n  dateTimeFormatter: PropTypes.func.isRequired,\n  showConversationDetail: PropTypes.func.isRequired,\n  autoLog: PropTypes.bool,\n  enableContactFallback: PropTypes.bool,\n};\n\nMessageItem.defaultProps = {\n  onLogConversation: undefined,\n  onClickToDial: undefined,\n  onViewContact: undefined,\n  onCreateContact: undefined,\n  isLoggedContact: () => false,\n  disableClickToDial: false,\n  outboundSmsPermission: false,\n  internalSmsPermission: false,\n  disableLinks: false,\n  autoLog: false,\n  enableContactFallback: undefined,\n};\n"]}