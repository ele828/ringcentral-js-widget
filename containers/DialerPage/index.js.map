{"version":3,"sources":["containers/DialerPage/index.js"],"names":["mapToProps","_","call","callingSettings","connectivityMonitor","locale","rateLimiter","webphone","isWebphoneMode","callingMode","waitingWebphoneConnected","connecting","currentLocale","callButtonDisabled","isIdle","connectivity","throttling","toNumber","fromNumbers","fromNumber","showSpinner","ready","mapToFunctions","regionSettings","console","log","keepToNumber","value","onToNumberChange","onCall","changeFromNumber","updateFromNumber","formatPhone","phoneNumber","areaCode","countryCode","DialerPage","propTypes","instanceOf","isRequired","default"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAOG;AAAA,MANDC,IAMC,QANDA,IAMC;AAAA,MALDC,eAKC,QALDA,eAKC;AAAA,MAJDC,mBAIC,QAJDA,mBAIC;AAAA,MAHDC,MAGC,QAHDA,MAGC;AAAA,MAFDC,WAEC,QAFDA,WAEC;AAAA,MADDC,QACC,QADDA,QACC;;AACD,MAAMC,iBAAkBL,gBAAgBM,WAAhB,KAAgC,uBAAaF,QAArE;AACA,MAAMG,2BAA4BF,kBAAkBD,QAAlB,IAA8BA,SAASI,UAAzE;AACA,SAAO;AACLC,mBAAeP,OAAOO,aADjB;AAELH,iBAAaN,gBAAgBM,WAFxB;AAGLD,kCAHK;AAILK,wBACE,CAACX,KAAKY,MAAN,IACG,CAACV,oBAAoBW,YADxB,IAEGT,YAAYU,UAFf,IAGGN,wBARA;AAULO,cAAUf,KAAKe,QAVV;AAWLC,iBAAaf,gBAAgBe,WAXxB;AAYLC,gBAAYhB,gBAAgBgB,UAZvB;AAaLC,iBAAa,EACXlB,KAAKmB,KAAL,IACAlB,gBAAgBkB,KADhB,IAEAhB,OAAOgB,KAFP,IAGAjB,oBAAoBiB,KAHpB,KAIC,CAACb,cAAD,IAAmB,CAACD,QAApB,IAAgC,CAACG,wBAJlC,CADW;AAbR,GAAP;AAqBD;;AAED,SAASY,cAAT,CAAwBrB,CAAxB,SAIG;AAAA,MAHDC,IAGC,SAHDA,IAGC;AAAA,MAFDC,eAEC,SAFDA,eAEC;AAAA,MADDoB,cACC,SADDA,cACC;;AACDC,UAAQC,GAAR,CAAY,KAAZ;AACA,SAAO;AACLC,kBAAc,sBAACC,KAAD,EAAW;AACvBzB,WAAK0B,gBAAL,CAAsBD,KAAtB;AACD,KAHI;AAILE,YAAQ,kBAAM;AACZ3B,WAAK2B,MAAL;AACD,KANI;AAOLC,sBAAkB;AAAA,aAAa3B,gBAAgB4B,gBAAhB,kCAAb;AAAA,KAPb;AAQLC,iBAAa;AAAA,aAAe,4BAAa;AACvCC,gCADuC;AAEvCC,kBAAUX,kBAAkBA,eAAeW,QAFJ;AAGvCC,qBAAaZ,kBAAkBA,eAAeY;AAHP,OAAb,CAAf;AAAA;AARR,GAAP;AAcD;;AAED,IAAMC,aAAa,yBACjBpC,UADiB,EAEjBsB,cAFiB,wBAAnB;;AAKA,IAAMe,YAAY;AAChBnC,QAAM,oBAAUoC,UAAV,iBAA2BC,UADjB;AAEhBpC,mBAAiB,oBAAUmC,UAAV,4BAAsCC,UAFvC;AAGhBnC,uBAAqB,oBAAUkC,UAAV,gCAA0CC,UAH/C;AAIhBlC,UAAQ,oBAAUiC,UAAV,mBAA6BC,UAJrB;AAKhBjC,eAAa,oBAAUgC,UAAV,wBAAkCC;AAL/B,CAAlB;;AAQAH,WAAWC,SAAX,GAAuBA,SAAvB;;QAGEf,c,GAAAA,c;QACAtB,U,GAAAA,U;QACAqC,S,GAAAA,S;QACcG,O,GAAdJ,U","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\n\nimport Locale from 'ringcentral-integration/modules/Locale';\nimport CallingSettings from 'ringcentral-integration/modules/CallingSettings';\nimport callingModes from 'ringcentral-integration/modules/CallingSettings/callingModes';\n\nimport Call from 'ringcentral-integration/modules/Call';\nimport ConnectivityMonitor from 'ringcentral-integration/modules/ConnectivityMonitor';\nimport RateLimiter from 'ringcentral-integration/modules/RateLimiter';\n\nimport DialerPanel from '../../components/DialerPanel';\n\nfunction mapToProps(_, {\n  call,\n  callingSettings,\n  connectivityMonitor,\n  locale,\n  rateLimiter,\n  webphone,\n}) {\n  const isWebphoneMode = (callingSettings.callingMode === callingModes.webphone);\n  const waitingWebphoneConnected = (isWebphoneMode && webphone && webphone.connecting);\n  return {\n    currentLocale: locale.currentLocale,\n    callingMode: callingSettings.callingMode,\n    isWebphoneMode,\n    callButtonDisabled: (\n      !call.isIdle\n      || !connectivityMonitor.connectivity\n      || rateLimiter.throttling\n      || waitingWebphoneConnected\n    ),\n    toNumber: call.toNumber,\n    fromNumbers: callingSettings.fromNumbers,\n    fromNumber: callingSettings.fromNumber,\n    showSpinner: !(\n      call.ready &&\n      callingSettings.ready &&\n      locale.ready &&\n      connectivityMonitor.ready &&\n      (!isWebphoneMode || !webphone || !waitingWebphoneConnected)\n    ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  call,\n  callingSettings,\n  regionSettings,\n}) {\n  console.log('123');\n  return {\n    keepToNumber: (value) => {\n      call.onToNumberChange(value);\n    },\n    onCall: () => {\n      call.onCall();\n    },\n    changeFromNumber: (...args) => callingSettings.updateFromNumber(...args),\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings && regionSettings.areaCode,\n      countryCode: regionSettings && regionSettings.countryCode,\n    }),\n  };\n}\n\nconst DialerPage = connect(\n  mapToProps,\n  mapToFunctions,\n)(DialerPanel);\n\nconst propTypes = {\n  call: PropTypes.instanceOf(Call).isRequired,\n  callingSettings: PropTypes.instanceOf(CallingSettings).isRequired,\n  connectivityMonitor: PropTypes.instanceOf(ConnectivityMonitor).isRequired,\n  locale: PropTypes.instanceOf(Locale).isRequired,\n  rateLimiter: PropTypes.instanceOf(RateLimiter).isRequired,\n};\n\nDialerPage.propTypes = propTypes;\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  propTypes,\n  DialerPage as default,\n};\n"]}