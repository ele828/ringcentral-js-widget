{"version":3,"sources":["containers/ComposeTextPage/index.js"],"names":["mapToProps","_","composeText","connectivityMonitor","contactSearch","locale","messageSender","rateLimiter","rolesAndPermissions","currentLocale","sendButtonDisabled","ready","idle","messageText","length","toNumbers","typingToNumber","connectivity","throttling","senderNumbers","senderNumbersList","senderNumber","outboundSMS","permissions","OutboundSMS","searchContactList","searching","result","showSpinner","mapToFunctions","messageStore","regionSettings","router","formatContactPhone","phoneNumber","areaCode","countryCode","send","then","responses","pushMessages","conversationId","conversation","id","push","clean","formatPhone","searchContact","search","searchString","updateSenderNumber","updateTypingToNumber","cleanTypingToNumber","addToNumber","removeToNumber","updateMessageText","ComposeTextPage","propTypes","instanceOf","isRequired"],"mappings":"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","file":"index.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport ComposeText from 'ringcentral-integration/modules/ComposeText';\nimport MessageStore from 'ringcentral-integration/modules/MessageStore';\nimport RolesAndPermissions from 'ringcentral-integration/modules/RolesAndPermissions';\n\nimport RouterInteraction from '../../modules/RouterInteraction';\n\nimport ComposeTextPanel from '../../components/ComposeTextPanel';\n\n\nfunction mapToProps(_, {\ncomposeText,\n  connectivityMonitor,\n  contactSearch,\n  locale,\n  messageSender,\n  rateLimiter,\n  rolesAndPermissions,\n}) {\n  return {\n    currentLocale: locale.currentLocale,\n    sendButtonDisabled: (\n      !(composeText.ready && messageSender.idle) ||\n      (composeText.messageText.length === 0) ||\n      (\n        composeText.toNumbers.length === 0 &&\n        composeText.typingToNumber.length === 0\n      ) ||\n      !connectivityMonitor.connectivity ||\n      rateLimiter.throttling\n    ),\n    senderNumbers: messageSender.senderNumbersList,\n    senderNumber: composeText.senderNumber,\n    typingToNumber: composeText.typingToNumber,\n    toNumbers: composeText.toNumbers,\n    messageText: composeText.messageText,\n    outboundSMS: rolesAndPermissions.permissions.OutboundSMS,\n    searchContactList: contactSearch.searching.result,\n    showSpinner: !(\n      composeText.ready &&\n      locale.ready &&\n      messageSender.ready &&\n      rolesAndPermissions.ready &&\n      contactSearch.ready\n    ),\n  };\n}\n\nfunction mapToFunctions(_, {\n  composeText,\n  contactSearch,\n  messageStore,\n  regionSettings,\n  router,\n  formatContactPhone = phoneNumber => formatNumber({\n    phoneNumber,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n  }),\n}) {\n  return {\n    send: () =>\n      composeText.send().then((responses) => {\n        if (!responses || responses.length === 0) {\n          return null;\n        }\n        messageStore.pushMessages(responses);\n        if (responses.length === 1) {\n          const conversationId =\n            responses[0] && responses[0].conversation && responses[0].conversation.id;\n          if (!conversationId) {\n            return null;\n          }\n          router.push(`/conversations/${conversationId}`);\n        } else {\n          router.push('/messages');\n        }\n        composeText.clean();\n        return null;\n      }),\n    formatPhone: formatContactPhone,\n    formatContactPhone,\n    searchContact: searchString => (\n      contactSearch.search({ searchString })\n    ),\n    updateSenderNumber: (...args) => composeText.updateSenderNumber(...args),\n    updateTypingToNumber: (...args) => composeText.updateTypingToNumber(...args),\n    cleanTypingToNumber: (...args) => composeText.cleanTypingToNumber(...args),\n    addToNumber: (...args) => composeText.addToNumber(...args),\n    removeToNumber: (...args) => composeText.removeToNumber(...args),\n    updateMessageText: (...args) => composeText.updateMessageText(...args),\n  };\n}\n\nconst ComposeTextPage = connect(\n  mapToProps,\n  mapToFunctions\n)(ComposeTextPanel);\n\nComposeTextPage.propTypes = {\n  router: PropTypes.instanceOf(RouterInteraction).isRequired,\n  composeText: PropTypes.instanceOf(ComposeText).isRequired,\n  messageStore: PropTypes.instanceOf(MessageStore).isRequired,\n  rolesAndPermissions: PropTypes.instanceOf(RolesAndPermissions).isRequired,\n};\n\nexport default ComposeTextPage;\n"]}