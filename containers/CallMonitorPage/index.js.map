{"version":3,"sources":["containers/CallMonitorPage/index.js"],"names":["mapToProps","_","locale","callMonitor","regionSettings","connectivityMonitor","rateLimiter","dateTimeFormat","callLogger","composeText","rolesAndPermissions","enableContactFallback","console","log","active","title","getString","currentLocale","calls","areaCode","countryCode","disableLinks","connectivity","throttling","outboundSmsPermission","permissions","OutboundSMS","internalSmsPermission","InternalSMS","loggingMap","showSpinner","ready","autoLog","mapToFunctions","onViewContact","onCreateContact","dateTimeFormatter","contactMatcher","contactSearch","onLogCall","isLoggedContact","router","composeTextRoute","webphone","utcTimestamp","formatDateTime","phoneNumber","contact","hasMatchNumber","ignoreCache","undefined","name","entityType","forceMatchNumber","call","redirect","logCall","onClickToSms","isDummyContact","push","updateTypingToNumber","search","searchString","addToNumber","typingToNumber","cleanTypingToNumber","webphoneAnswer","answer","webphoneReject","reject","webphoneHangup","hangup","webphoneResume","resume","CallMonitorPage"],"mappings":"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","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport CallsPanel from '../../components/CallsPanel';\nimport i18n from './i18n';\n\nfunction mapToProps(_, {\n  locale,\n  callMonitor,\n  regionSettings,\n  connectivityMonitor,\n  rateLimiter,\n  dateTimeFormat,\n  callLogger,\n  composeText,\n  rolesAndPermissions,\n  enableContactFallback = false,\n}) {\n  console.log('monitor props')\n  return {\n    enableContactFallback,\n    active: true,\n    title: i18n.getString('title', locale.currentLocale),\n    currentLocale: locale.currentLocale,\n    calls: callMonitor.calls,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    disableLinks: !connectivityMonitor.connectivity ||\n      rateLimiter.throttling,\n    outboundSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.OutboundSMS\n    ),\n    internalSmsPermission: !!(\n      rolesAndPermissions.permissions &&\n      rolesAndPermissions.permissions.InternalSMS\n    ),\n    loggingMap: (callLogger && callLogger.loggingMap),\n    showSpinner: !(\n      locale.ready &&\n      callMonitor.ready &&\n      regionSettings.ready &&\n      connectivityMonitor.ready &&\n      dateTimeFormat.ready &&\n      (!callLogger || callLogger.ready) &&\n      (!rolesAndPermissions || rolesAndPermissions.ready) &&\n      (!composeText || composeText.ready)\n    ),\n    autoLog: !!(callLogger && callLogger.autoLog),\n  };\n}\nfunction mapToFunctions(_, {\n  dateTimeFormat,\n  onViewContact,\n  onCreateContact,\n  dateTimeFormatter,\n  callLogger,\n  contactMatcher,\n  contactSearch,\n  onLogCall,\n  isLoggedContact,\n  router,\n  composeTextRoute = '/composeText',\n  composeText,\n  webphone,\n}) {\n  dateTimeFormatter = ({ utcTimestamp }) => dateTimeFormat.formatDateTime({\n    utcTimestamp,\n  });\n  console.log('monitor func')\n  return {\n    dateTimeFormatter,\n    onViewContact: onViewContact ?\n      async ({ phoneNumber, contact }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (hasMatchNumber) {\n          await onViewContact({ phoneNumber, contact });\n        }\n      } :\n      undefined,\n    onCreateContact: onCreateContact ?\n      async ({ phoneNumber, name, entityType }) => {\n        const hasMatchNumber = await contactMatcher.hasMatchNumber({\n          phoneNumber,\n          ignoreCache: true\n        });\n        if (!hasMatchNumber) {\n          await onCreateContact({ phoneNumber, name, entityType });\n          await contactMatcher.forceMatchNumber({ phoneNumber });\n        }\n      } :\n      undefined,\n    isLoggedContact,\n    onLogCall: onLogCall ||\n    (callLogger && (async ({ call, contact, redirect = true }) => {\n      await callLogger.logCall({\n        call,\n        contact,\n        redirect,\n      });\n    })),\n    onClickToSms: composeText ?\n      async (contact, isDummyContact = false) => {\n        if (router) {\n          router.push(composeTextRoute);\n        }\n        if (contact.name && contact.phoneNumber && isDummyContact) {\n          composeText.updateTypingToNumber(contact.name);\n          contactSearch.search({ searchString: contact.name });\n        } else {\n          composeText.addToNumber(contact);\n          if (composeText.typingToNumber === contact.phoneNumber) {\n            composeText.cleanTypingToNumber();\n          }\n        }\n      } :\n      undefined,\n    webphoneAnswer: (...args) => (webphone && webphone.answer(...args)),\n    webphoneReject: (...args) => (webphone && webphone.reject(...args)),\n    webphoneHangup: (...args) => (webphone && webphone.hangup(...args)),\n    webphoneResume: (...args) => (webphone && webphone.resume(...args)),\n  };\n}\n\nconst CallMonitorPage = connect(mapToProps, mapToFunctions)(CallsPanel);\n\nexport default CallMonitorPage;\n"]}