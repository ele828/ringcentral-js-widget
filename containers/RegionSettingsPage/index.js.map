{"version":3,"sources":["containers/RegionSettingsPage/index.js"],"names":["mapToProps","_","locale","regionSettings","availableCountries","countryCode","areaCode","currentLocale","mapToFunctions","auth","router","onLogoutButtonClick","logout","onBackButtonClick","goBack","onSave","setData","RegionSettingsPage","propTypes","instanceOf","isRequired","default"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,UAAT,CAAoBC,CAApB,QAGG;AAAA,MAFDC,MAEC,QAFDA,MAEC;AAAA,MADDC,cACC,QADDA,cACC;;AACD,SAAO;AACLC,wBAAoBD,eAAeC,kBAD9B;AAELC,iBAAaF,eAAeE,WAFvB;AAGLC,cAAUH,eAAeG,QAHpB;AAILC,mBAAeL,OAAOK;AAJjB,GAAP;AAMD;;AAED,SAASC,cAAT,CAAwBP,CAAxB,SAIG;AAAA;;AAAA,MAHDQ,IAGC,SAHDA,IAGC;AAAA,MAFDN,cAEC,SAFDA,cAEC;AAAA,MADDO,MACC,SADDA,MACC;;AACD,SAAO;AACLC;AAAA,6EAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACbF,KAAKG,MAAL,EADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAArB;;AAAA;AAAA;AAAA;AAAA,OADK;AAILC,uBAAmB,6BAAM;AACvBH,aAAOI,MAAP;AACD,KANI;AAOLC,YAAQ,uBAA+B;AAAA,UAA5BT,QAA4B,SAA5BA,QAA4B;AAAA,UAAlBD,WAAkB,SAAlBA,WAAkB;;AACrCF,qBAAea,OAAf,CAAuB;AACrBV,0BADqB;AAErBD;AAFqB,OAAvB;AAID;AAZI,GAAP;AAcD;;AAED,IAAMY,qBAAqB,yBACzBjB,UADyB,EAEzBQ,cAFyB,gCAA3B;;AAKA,IAAMU,YAAY;AAChBhB,UAAQ,oBAAUiB,UAAV,mBAA6BC,UADrB;AAEhBjB,kBAAgB,oBAAUgB,UAAV,2BAAqCC,UAFrC;AAGhBV,UAAQ,oBAAUS,UAAV,8BAAwCC;AAHhC,CAAlB;;AAMAH,mBAAmBC,SAAnB,GAA+BA,SAA/B;;QAGEV,c,GAAAA,c;QACAR,U,GAAAA,U;QACAkB,S,GAAAA,S;QACsBG,O,GAAtBJ,kB","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Locale from 'ringcentral-integration/modules/Locale';\nimport RegionSettings from 'ringcentral-integration/modules/RegionSettings';\nimport RouterInteraction from '../../modules/RouterInteraction';\nimport RegionSettingsPanel from '../../components/RegionSettingsPanel';\n\nfunction mapToProps(_, {\n  locale,\n  regionSettings,\n}) {\n  return {\n    availableCountries: regionSettings.availableCountries,\n    countryCode: regionSettings.countryCode,\n    areaCode: regionSettings.areaCode,\n    currentLocale: locale.currentLocale,\n  };\n}\n\nfunction mapToFunctions(_, {\n  auth,\n  regionSettings,\n  router,\n}) {\n  return {\n    onLogoutButtonClick: async () => {\n      await auth.logout();\n    },\n    onBackButtonClick: () => {\n      router.goBack();\n    },\n    onSave: ({ areaCode, countryCode }) => {\n      regionSettings.setData({\n        areaCode,\n        countryCode,\n      });\n    },\n  };\n}\n\nconst RegionSettingsPage = connect(\n  mapToProps,\n  mapToFunctions,\n)(RegionSettingsPanel);\n\nconst propTypes = {\n  locale: PropTypes.instanceOf(Locale).isRequired,\n  regionSettings: PropTypes.instanceOf(RegionSettings).isRequired,\n  router: PropTypes.instanceOf(RouterInteraction).isRequired,\n};\n\nRegionSettingsPage.propTypes = propTypes;\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  propTypes,\n  RegionSettingsPage as default,\n};\n"]}