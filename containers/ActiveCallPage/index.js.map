{"version":3,"sources":["containers/ActiveCallPage/index.js"],"names":["ActiveCallPage","props","state","badgeOffsetX","badgeOffsetY","selectedMatcherIndex","avatarUrl","onSelectMatcherName","_","index","setState","nameMatches","session","direction","outbound","toMatches","fromMatches","contact","getAvatarUrl","then","updatePositionOffset","x","y","answer","id","reject","onMute","onUnmute","onHold","onUnhold","onRecord","onStopRecord","hangup","onKeyPadChange","sendDTMF","value","toVoiceMail","replyWithMessage","message","onForward","forwardNumber","nextProps","active","minimized","toggleMinimized","getString","currentLocale","isRinging","inbound","callStatus","connecting","phoneNumber","to","from","fallbackUserName","formatPhone","areaCode","countryCode","forwardingNumbers","children","startTime","isOnMute","isOnHold","isOnRecord","onAdd","propTypes","shape","string","number","bool","isRequired","func","node","array","defaultProps","undefined","mapToProps","webphone","locale","contactMatcher","regionSettings","forwardingNumber","currentSession","contactMapping","dataMapping","mapToFunctions","router","sessionId","mute","unmute","hold","unhold","startRecord","stopRecord","push","forward","ActiveCallContainer","instanceOf"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;;;IAEMA,c;;;AACJ,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA,sJACXA,KADW;;AAGjB,UAAKC,KAAL,GAAa;AACXC,oBAAc,CADH;AAEXC,oBAAc,CAFH;AAGXC,4BAAsB,CAHX;AAIXC,iBAAW;AAJA,KAAb;;AAOA,UAAKC,mBAAL,GAA2B,UAACC,CAAD,EAAIC,KAAJ,EAAc;AACvC;AACA,YAAKC,QAAL,CAAc;AACZL,8BAAuBI,QAAQ,CADnB;AAEZH,mBAAW;AAFC,OAAd;AAIA,UAAMK,cAAc,MAAKV,KAAL,CAAWW,OAAX,CAAmBC,SAAnB,KAAiC,yBAAeC,QAAhD,GAClB,MAAKb,KAAL,CAAWc,SADO,GACK,MAAKd,KAAL,CAAWe,WADpC;AAEA,UAAMC,UAAUN,eAAeA,YAAYF,QAAQ,CAApB,CAA/B;AACA,UAAIQ,OAAJ,EAAa;AACX,cAAKhB,KAAL,CAAWiB,YAAX,CAAwBD,OAAxB,EAAiCE,IAAjC,CAAsC,UAACb,SAAD,EAAe;AACnD,gBAAKI,QAAL,CAAc,EAAEJ,oBAAF,EAAd;AACD,SAFD;AAGD;AACF,KAdD;;AAgBA,UAAKc,oBAAL,GAA4B,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACpC,YAAKZ,QAAL,CAAc;AACZP,sBAAckB,CADF;AAEZjB,sBAAckB;AAFF,OAAd;AAID,KALD;;AAOA,UAAKC,MAAL,GAAc;AAAA,aACZ,MAAKtB,KAAL,CAAWsB,MAAX,CAAkB,MAAKtB,KAAL,CAAWW,OAAX,CAAmBY,EAArC,CADY;AAAA,KAAd;AAEA,UAAKC,MAAL,GAAc;AAAA,aACZ,MAAKxB,KAAL,CAAWwB,MAAX,CAAkB,MAAKxB,KAAL,CAAWW,OAAX,CAAmBY,EAArC,CADY;AAAA,KAAd;AAEA,UAAKE,MAAL,GAAc;AAAA,aACZ,MAAKzB,KAAL,CAAWyB,MAAX,CAAkB,MAAKzB,KAAL,CAAWW,OAAX,CAAmBY,EAArC,CADY;AAAA,KAAd;AAEA,UAAKG,QAAL,GAAgB;AAAA,aACd,MAAK1B,KAAL,CAAW0B,QAAX,CAAoB,MAAK1B,KAAL,CAAWW,OAAX,CAAmBY,EAAvC,CADc;AAAA,KAAhB;AAEA,UAAKI,MAAL,GAAc;AAAA,aACZ,MAAK3B,KAAL,CAAW2B,MAAX,CAAkB,MAAK3B,KAAL,CAAWW,OAAX,CAAmBY,EAArC,CADY;AAAA,KAAd;AAEA,UAAKK,QAAL,GAAgB;AAAA,aACd,MAAK5B,KAAL,CAAW4B,QAAX,CAAoB,MAAK5B,KAAL,CAAWW,OAAX,CAAmBY,EAAvC,CADc;AAAA,KAAhB;AAEA,UAAKM,QAAL,GAAgB;AAAA,aACd,MAAK7B,KAAL,CAAW6B,QAAX,CAAoB,MAAK7B,KAAL,CAAWW,OAAX,CAAmBY,EAAvC,CADc;AAAA,KAAhB;AAEA,UAAKO,YAAL,GAAoB;AAAA,aAClB,MAAK9B,KAAL,CAAW8B,YAAX,CAAwB,MAAK9B,KAAL,CAAWW,OAAX,CAAmBY,EAA3C,CADkB;AAAA,KAApB;AAEA,UAAKQ,MAAL,GAAc;AAAA,aACZ,MAAK/B,KAAL,CAAW+B,MAAX,CAAkB,MAAK/B,KAAL,CAAWW,OAAX,CAAmBY,EAArC,CADY;AAAA,KAAd;AAEA,UAAKS,cAAL,GAAsB;AAAA,aACpB,MAAKhC,KAAL,CAAWiC,QAAX,CAAoBC,KAApB,EAA2B,MAAKlC,KAAL,CAAWW,OAAX,CAAmBY,EAA9C,CADoB;AAAA,KAAtB;AAEA,UAAKY,WAAL,GAAmB;AAAA,aACjB,MAAKnC,KAAL,CAAWmC,WAAX,CAAuB,MAAKnC,KAAL,CAAWW,OAAX,CAAmBY,EAA1C,CADiB;AAAA,KAAnB;AAEA,UAAKa,gBAAL,GAAwB;AAAA,aACtB,MAAKpC,KAAL,CAAWoC,gBAAX,CAA4B,MAAKpC,KAAL,CAAWW,OAAX,CAAmBY,EAA/C,EAAmDc,OAAnD,CADsB;AAAA,KAAxB;AAEA,UAAKC,SAAL,GAAiB;AAAA,aACf,MAAKtC,KAAL,CAAWsC,SAAX,CAAqB,MAAKtC,KAAL,CAAWW,OAAX,CAAmBY,EAAxC,EAA4CgB,aAA5C,CADe;AAAA,KAAjB;AAzDiB;AA2DlB;;;;8CAEyBC,S,EAAW;AAAA;;AACnC,UAAI,KAAKxC,KAAL,CAAWW,OAAX,CAAmBY,EAAnB,KAA0BiB,UAAU7B,OAAV,CAAkBY,EAAhD,EAAoD;AAClD,aAAKd,QAAL,CAAc;AACZL,gCAAsB,CADV;AAEZC,qBAAW;AAFC,SAAd;AAIA,YAAMK,cAAc8B,UAAU7B,OAAV,CAAkBC,SAAlB,KAAgC,yBAAeC,QAA/C,GAClB2B,UAAU1B,SADQ,GACI0B,UAAUzB,WADlC;AAEA,YAAMC,UAAUN,eAAeA,YAAY,CAAZ,CAA/B;AACA,YAAIM,OAAJ,EAAa;AACXwB,oBAAUvB,YAAV,CAAuBD,OAAvB,EAAgCE,IAAhC,CAAqC,UAACb,SAAD,EAAe;AAClD,mBAAKI,QAAL,CAAc,EAAEJ,oBAAF,EAAd;AACD,WAFD;AAGD;AACF;AACF;;;6BAEQ;AACP,UAAMM,UAAU,KAAKX,KAAL,CAAWW,OAA3B;AACA,UAAM8B,SAAS,CAAC,CAAC9B,QAAQY,EAAzB;AACA,UAAI,CAACkB,MAAL,EAAa;AACX,eAAO,IAAP;AACD;AACD,UAAI,KAAKzC,KAAL,CAAW0C,SAAf,EAA0B;AACxB,eACE;AACE,mBAAS,KAAK1C,KAAL,CAAW2C,eADtB;AAEE,mBAAS,KAAK1C,KAAL,CAAWC,YAFtB;AAGE,mBAAS,KAAKD,KAAL,CAAWE,YAHtB;AAIE,gCAAsB,KAAKgB,oBAJ7B;AAKE,iBAAO,eAAKyB,SAAL,CAAe,YAAf,EAA6B,KAAK5C,KAAL,CAAW6C,aAAxC;AALT,UADF;AASD;AACD,UAAIC,YAAY,KAAhB;AACA,UACEnC,QAAQC,SAAR,KAAsB,yBAAemC,OAArC,IACApC,QAAQqC,UAAR,KAAuB,wBAAcC,UAFvC,EAGE;AACAH,oBAAY,IAAZ;AACD;AACD;AACA,UAAMI,cAAcvC,QAAQC,SAAR,KAAsB,yBAAeC,QAArC,GAClBF,QAAQwC,EADU,GACLxC,QAAQyC,IADvB;AAEA,UAAM1C,cAAcC,QAAQC,SAAR,KAAsB,yBAAeC,QAArC,GAClB,KAAKb,KAAL,CAAWc,SADO,GACK,KAAKd,KAAL,CAAWe,WADpC;AAEA,UAAIsC,yBAAJ;AACA,UAAI1C,QAAQC,SAAR,KAAsB,yBAAemC,OAArC,IAAgDpC,QAAQyC,IAAR,KAAiB,WAArE,EAAkF;AAChFC,2BAAmB,eAAKT,SAAL,CAAe,WAAf,EAA4B,KAAK5C,KAAL,CAAW6C,aAAvC,CAAnB;AACD;AACD,UAAI,CAACQ,gBAAL,EAAuB;AACrBA,2BAAmB,eAAKT,SAAL,CAAe,SAAf,EAA0B,KAAK5C,KAAL,CAAW6C,aAArC,CAAnB;AACD;AACD,UAAIC,SAAJ,EAAe;AACb,eACE;AAAA;AAAA;AACE,2BAAe,KAAK9C,KAAL,CAAW6C,aAD5B;AAEE,yBAAanC,WAFf;AAGE,0BAAc2C,gBAHhB;AAIE,yBAAaH,WAJf;AAKE,oBAAQ,KAAK5B,MALf;AAME,oBAAQ,KAAKE,MANf;AAOE,8BAAkB,KAAKY,gBAPzB;AAQE,yBAAa,KAAKD,WARpB;AASE,yBAAa,KAAKnC,KAAL,CAAWsD,WAT1B;AAUE,sBAAU,KAAKtD,KAAL,CAAWuD,QAVvB;AAWE,yBAAa,KAAKvD,KAAL,CAAWwD,WAX1B;AAYE,kCAAsB,KAAKvD,KAAL,CAAWG,oBAZnC;AAaE,iCAAqB,KAAKE,mBAb5B;AAcE,uBAAW,KAAKL,KAAL,CAAWI,SAdxB;AAeE,+BAAmB,KAAKL,KAAL,CAAW2C,eAfhC;AAgBE,+BAAmB,KAAK3C,KAAL,CAAWyD,iBAhBhC;AAiBE,uBAAW,KAAKnB;AAjBlB;AAmBG,eAAKtC,KAAL,CAAW0D;AAnBd,SADF;AAuBD;AACD,aACE;AAAA;AAAA;AACE,2BAAiB,eAAKd,SAAL,CAAe,aAAf,EAA8B,KAAK5C,KAAL,CAAW6C,aAAzC,CADnB;AAEE,yBAAe,KAAK7C,KAAL,CAAW6C,aAF5B;AAGE,uBAAa,KAAK7C,KAAL,CAAWsD,WAH1B;AAIE,uBAAaJ,WAJf;AAKE,qBAAWvC,QAAQY,EALrB;AAME,sBAAYZ,QAAQqC,UANtB;AAOE,qBAAWrC,QAAQgD,SAPrB;AAQE,oBAAUhD,QAAQiD,QARpB;AASE,oBAAUjD,QAAQkD,QATpB;AAUE,sBAAYlD,QAAQmD,UAVtB;AAWE,6BAAmB,KAAK9D,KAAL,CAAW2C,eAXhC;AAYE,kBAAQ,KAAKlB,MAZf;AAaE,oBAAU,KAAKC,QAbjB;AAcE,kBAAQ,KAAKC,MAdf;AAeE,oBAAU,KAAKC,QAfjB;AAgBE,oBAAU,KAAKC,QAhBjB;AAiBE,wBAAc,KAAKC,YAjBrB;AAkBE,0BAAgB,KAAKE,cAlBvB;AAmBE,kBAAQ,KAAKD,MAnBf;AAoBE,iBAAO,KAAK/B,KAAL,CAAW+D,KApBpB;AAqBE,uBAAarD,WArBf;AAsBE,wBAAc2C,gBAtBhB;AAuBE,oBAAU,KAAKrD,KAAL,CAAWuD,QAvBvB;AAwBE,uBAAa,KAAKvD,KAAL,CAAWwD,WAxB1B;AAyBE,gCAAsB,KAAKvD,KAAL,CAAWG,oBAzBnC;AA0BE,+BAAqB,KAAKE,mBA1B5B;AA2BE,qBAAW,KAAKL,KAAL,CAAWI;AA3BxB;AA6BG,aAAKL,KAAL,CAAW0D;AA7Bd,OADF;AAiCD;;;;;AAGH3D,eAAeiE,SAAf,GAA2B;AACzBrD,WAAS,oBAAUsD,KAAV,CAAgB;AACvB1C,QAAI,oBAAU2C,MADS;AAEvBtD,eAAW,oBAAUsD,MAFE;AAGvBP,eAAW,oBAAUQ,MAHE;AAIvBP,cAAU,oBAAUQ,IAJG;AAKvBP,cAAU,oBAAUO,IALG;AAMvBN,gBAAY,oBAAUM,IANC;AAOvBjB,QAAI,oBAAUe,MAPS;AAQvBd,UAAM,oBAAUc;AARO,GAAhB,EASNG,UAVsB;AAWzBxB,iBAAe,oBAAUqB,MAAV,CAAiBG,UAXP;AAYzB3B,aAAW,oBAAU0B,IAAV,CAAeC,UAZD;AAazB1B,mBAAiB,oBAAU2B,IAAV,CAAeD,UAbP;AAczB5C,UAAQ,oBAAU6C,IAAV,CAAeD,UAdE;AAezB3C,YAAU,oBAAU4C,IAAV,CAAeD,UAfA;AAgBzB1C,UAAQ,oBAAU2C,IAAV,CAAeD,UAhBE;AAiBzBzC,YAAU,oBAAU0C,IAAV,CAAeD,UAjBA;AAkBzBxC,YAAU,oBAAUyC,IAAV,CAAeD,UAlBA;AAmBzBvC,gBAAc,oBAAUwC,IAAV,CAAeD,UAnBJ;AAoBzBtC,UAAQ,oBAAUuC,IAAV,CAAeD,UApBE;AAqBzB/C,UAAQ,oBAAUgD,IAAV,CAAeD,UArBE;AAsBzB7C,UAAQ,oBAAU8C,IAAV,CAAeD,UAtBE;AAuBzBpC,YAAU,oBAAUqC,IAAV,CAAeD,UAvBA;AAwBzBlC,eAAa,oBAAUmC,IAAV,CAAeD,UAxBH;AAyBzBjC,oBAAkB,oBAAUkC,IAAV,CAAeD,UAzBR;AA0BzBf,eAAa,oBAAUgB,IAAV,CAAeD,UA1BH;AA2BzBN,SAAO,oBAAUO,IAAV,CAAeD,UA3BG;AA4BzBX,YAAU,oBAAUa,IA5BK;AA6BzBzD,aAAW,oBAAU0D,KAAV,CAAgBH,UA7BF;AA8BzBtD,eAAa,oBAAUyD,KAAV,CAAgBH,UA9BJ;AA+BzBd,YAAU,oBAAUW,MAAV,CAAiBG,UA/BF;AAgCzBb,eAAa,oBAAUU,MAAV,CAAiBG,UAhCL;AAiCzBpD,gBAAc,oBAAUqD,IAAV,CAAeD,UAjCJ;AAkCzBZ,qBAAmB,oBAAUe,KAAV,CAAgBH,UAlCV;AAmCzB/B,aAAW,oBAAUgC,IAAV,CAAeD;AAnCD,CAA3B;;AAsCAtE,eAAe0E,YAAf,GAA8B;AAC5Bf,YAAUgB;AADkB,CAA9B;;AAIA,SAASC,UAAT,CAAoBpE,CAApB,QAMG;AAAA,MALDqE,QAKC,QALDA,QAKC;AAAA,MAJDC,MAIC,QAJDA,MAIC;AAAA,MAHDC,cAGC,QAHDA,cAGC;AAAA,MAFDC,cAEC,QAFDA,cAEC;AAAA,MADDC,gBACC,QADDA,gBACC;;AACD,MAAMC,iBAAiBL,SAASK,cAAT,IAA2B,EAAlD;AACA,MAAMC,iBAAiBJ,kBAAkBA,eAAeK,WAAxD;AACA,SAAO;AACLpE,iBAAcmE,kBAAkBA,eAAeD,eAAe7B,IAA9B,CAAnB,IAA2D,EADnE;AAELtC,eAAYoE,kBAAkBA,eAAeD,eAAe9B,EAA9B,CAAnB,IAAyD,EAF/D;AAGLN,mBAAegC,OAAOhC,aAHjB;AAILlC,aAASsE,cAJJ;AAKLvC,eAAWkC,SAASlC,SALf;AAMLa,cAAUwB,eAAexB,QANpB;AAOLC,iBAAauB,eAAevB,WAPvB;AAQLC,uBAAmBuB,iBAAiBvB;AAR/B,GAAP;AAUD;;AAED,SAAS2B,cAAT,CAAwB7E,CAAxB,SAKG;AAAA,MAJDqE,QAIC,SAJDA,QAIC;AAAA,MAHDG,cAGC,SAHDA,cAGC;AAAA,MAFDM,MAEC,SAFDA,MAEC;AAAA,MADDpE,YACC,SADDA,YACC;;AACD,SAAO;AACLqC,iBAAa;AAAA,aAAe,4BAAa;AACvCJ,gCADuC;AAEvCK,kBAAUwB,eAAexB,QAFc;AAGvCC,qBAAauB,eAAevB;AAHW,OAAb,CAAf;AAAA,KADR;AAMLzB,YAAQ;AAAA,aAAa6C,SAAS7C,MAAT,CAAgBuD,SAAhB,CAAb;AAAA,KANH;AAOLhE,YAAQ;AAAA,aAAasD,SAAStD,MAAT,CAAgBgE,SAAhB,CAAb;AAAA,KAPH;AAQL9D,YAAQ;AAAA,aAAaoD,SAASpD,MAAT,CAAgB8D,SAAhB,CAAb;AAAA,KARH;AASL7D,YAAQ;AAAA,aAAamD,SAASW,IAAT,CAAcD,SAAd,CAAb;AAAA,KATH;AAUL5D,cAAU;AAAA,aAAakD,SAASY,MAAT,CAAgBF,SAAhB,CAAb;AAAA,KAVL;AAWL3D,YAAQ;AAAA,aAAaiD,SAASa,IAAT,CAAcH,SAAd,CAAb;AAAA,KAXH;AAYL1D,cAAU;AAAA,aAAagD,SAASc,MAAT,CAAgBJ,SAAhB,CAAb;AAAA,KAZL;AAaLzD,cAAU;AAAA,aAAa+C,SAASe,WAAT,CAAqBL,SAArB,CAAb;AAAA,KAbL;AAcLxD,kBAAc;AAAA,aAAa8C,SAASgB,UAAT,CAAoBN,SAApB,CAAb;AAAA,KAdT;AAeLvB,WAAO,iBAAM;AACXsB,aAAOQ,IAAP,CAAY,SAAZ;AACAjB,eAASjC,eAAT;AACD,KAlBI;AAmBLV,cAAU,kBAACC,KAAD,EAAQoD,SAAR;AAAA,aAAsBV,SAAS3C,QAAT,CAAkBC,KAAlB,EAAyBoD,SAAzB,CAAtB;AAAA,KAnBL;AAoBLnD,iBAAa;AAAA,aAAayC,SAASzC,WAAT,CAAqBmD,SAArB,CAAb;AAAA,KApBR;AAqBLhD,eAAW,mBAACgD,SAAD,EAAY/C,aAAZ;AAAA,aAA8BqC,SAASkB,OAAT,CAAiBR,SAAjB,EAA4B/C,aAA5B,CAA9B;AAAA,KArBN;AAsBLH,sBAAkB,0BAACkD,SAAD,EAAYjD,OAAZ;AAAA,aAAwBuC,SAASxC,gBAAT,CAA0BkD,SAA1B,EAAqCjD,OAArC,CAAxB;AAAA,KAtBb;AAuBLM,qBAAiB;AAAA,aAAMiC,SAASjC,eAAT,EAAN;AAAA,KAvBZ;AAwBL1B;AAxBK,GAAP;AA0BD;;AAED,IAAM8E,sBAAsB,yBAC1BpB,UAD0B,EAE1BS,cAF0B,EAG1BrF,cAH0B,CAA5B;;AAKAgG,oBAAoB/B,SAApB,GAAgC;AAC9BY,YAAU,oBAAUoB,UAAV,qBAA+B3B,UADX;AAE9BQ,UAAQ,oBAAUmB,UAAV,mBAA6B3B,UAFP;AAG9BU,kBAAgB,oBAAUiB,UAAV,2BAAqC3B,UAHvB;AAI9BW,oBAAkB,oBAAUgB,UAAV,6BAAuC3B,UAJ3B;AAK9BpD,gBAAc,oBAAUqD;AALM,CAAhC;;AAQAyB,oBAAoBtB,YAApB,GAAmC;AACjCxD,gBAAc;AAAA,WAAM,IAAN;AAAA;AADmB,CAAnC;;kBAIe8E,mB","file":"index.js","sourcesContent":["import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport Webphone from 'ringcentral-integration/modules/Webphone';\nimport Locale from 'ringcentral-integration/modules/Locale';\nimport RegionSettings from 'ringcentral-integration/modules/RegionSettings';\nimport ForwardingNumber from 'ringcentral-integration/modules/ForwardingNumber';\n\nimport callDirections from 'ringcentral-integration/enums/callDirections';\nimport sessionStatus from 'ringcentral-integration/modules/Webphone/sessionStatus';\n\nimport ActiveCallPanel from '../../components/ActiveCallPanel';\nimport IncomingCallPanel from '../../components/IncomingCallPanel';\nimport ActiveCallBadge from '../../components/ActiveCallBadge';\n\nimport i18n from './i18n';\n\nclass ActiveCallPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      badgeOffsetX: 0,\n      badgeOffsetY: 0,\n      selectedMatcherIndex: 0,\n      avatarUrl: null,\n    };\n\n    this.onSelectMatcherName = (_, index) => {\n      // `remember last matcher contact` will finish in next ticket\n      this.setState({\n        selectedMatcherIndex: (index - 1),\n        avatarUrl: null,\n      });\n      const nameMatches = this.props.session.direction === callDirections.outbound ?\n        this.props.toMatches : this.props.fromMatches;\n      const contact = nameMatches && nameMatches[index - 1];\n      if (contact) {\n        this.props.getAvatarUrl(contact).then((avatarUrl) => {\n          this.setState({ avatarUrl });\n        });\n      }\n    };\n\n    this.updatePositionOffset = (x, y) => {\n      this.setState({\n        badgeOffsetX: x,\n        badgeOffsetY: y,\n      });\n    };\n\n    this.answer = () =>\n      this.props.answer(this.props.session.id);\n    this.reject = () =>\n      this.props.reject(this.props.session.id);\n    this.onMute = () =>\n      this.props.onMute(this.props.session.id);\n    this.onUnmute = () =>\n      this.props.onUnmute(this.props.session.id);\n    this.onHold = () =>\n      this.props.onHold(this.props.session.id);\n    this.onUnhold = () =>\n      this.props.onUnhold(this.props.session.id);\n    this.onRecord = () =>\n      this.props.onRecord(this.props.session.id);\n    this.onStopRecord = () =>\n      this.props.onStopRecord(this.props.session.id);\n    this.hangup = () =>\n      this.props.hangup(this.props.session.id);\n    this.onKeyPadChange = value =>\n      this.props.sendDTMF(value, this.props.session.id);\n    this.toVoiceMail = () =>\n      this.props.toVoiceMail(this.props.session.id);\n    this.replyWithMessage = message =>\n      this.props.replyWithMessage(this.props.session.id, message);\n    this.onForward = forwardNumber =>\n      this.props.onForward(this.props.session.id, forwardNumber);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.session.id !== nextProps.session.id) {\n      this.setState({\n        selectedMatcherIndex: 0,\n        avatarUrl: null,\n      });\n      const nameMatches = nextProps.session.direction === callDirections.outbound ?\n        nextProps.toMatches : nextProps.fromMatches;\n      const contact = nameMatches && nameMatches[0];\n      if (contact) {\n        nextProps.getAvatarUrl(contact).then((avatarUrl) => {\n          this.setState({ avatarUrl });\n        });\n      }\n    }\n  }\n\n  render() {\n    const session = this.props.session;\n    const active = !!session.id;\n    if (!active) {\n      return null;\n    }\n    if (this.props.minimized) {\n      return (\n        <ActiveCallBadge\n          onClick={this.props.toggleMinimized}\n          offsetX={this.state.badgeOffsetX}\n          offsetY={this.state.badgeOffsetY}\n          updatePositionOffset={this.updatePositionOffset}\n          title={i18n.getString('activeCall', this.props.currentLocale)}\n        />\n      );\n    }\n    let isRinging = false;\n    if (\n      session.direction === callDirections.inbound &&\n      session.callStatus === sessionStatus.connecting\n    ) {\n      isRinging = true;\n    }\n    // isRinging = true;\n    const phoneNumber = session.direction === callDirections.outbound ?\n      session.to : session.from;\n    const nameMatches = session.direction === callDirections.outbound ?\n      this.props.toMatches : this.props.fromMatches;\n    let fallbackUserName;\n    if (session.direction === callDirections.inbound && session.from === 'anonymous') {\n      fallbackUserName = i18n.getString('anonymous', this.props.currentLocale);\n    }\n    if (!fallbackUserName) {\n      fallbackUserName = i18n.getString('unknown', this.props.currentLocale);\n    }\n    if (isRinging) {\n      return (\n        <IncomingCallPanel\n          currentLocale={this.props.currentLocale}\n          nameMatches={nameMatches}\n          fallBackName={fallbackUserName}\n          phoneNumber={phoneNumber}\n          answer={this.answer}\n          reject={this.reject}\n          replyWithMessage={this.replyWithMessage}\n          toVoiceMail={this.toVoiceMail}\n          formatPhone={this.props.formatPhone}\n          areaCode={this.props.areaCode}\n          countryCode={this.props.countryCode}\n          selectedMatcherIndex={this.state.selectedMatcherIndex}\n          onSelectMatcherName={this.onSelectMatcherName}\n          avatarUrl={this.state.avatarUrl}\n          onBackButtonClick={this.props.toggleMinimized}\n          forwardingNumbers={this.props.forwardingNumbers}\n          onForward={this.onForward}\n        >\n          {this.props.children}\n        </IncomingCallPanel>\n      );\n    }\n    return (\n      <ActiveCallPanel\n        backButtonLabel={i18n.getString('activeCalls', this.props.currentLocale)}\n        currentLocale={this.props.currentLocale}\n        formatPhone={this.props.formatPhone}\n        phoneNumber={phoneNumber}\n        sessionId={session.id}\n        callStatus={session.callStatus}\n        startTime={session.startTime}\n        isOnMute={session.isOnMute}\n        isOnHold={session.isOnHold}\n        isOnRecord={session.isOnRecord}\n        onBackButtonClick={this.props.toggleMinimized}\n        onMute={this.onMute}\n        onUnmute={this.onUnmute}\n        onHold={this.onHold}\n        onUnhold={this.onUnhold}\n        onRecord={this.onRecord}\n        onStopRecord={this.onStopRecord}\n        onKeyPadChange={this.onKeyPadChange}\n        hangup={this.hangup}\n        onAdd={this.props.onAdd}\n        nameMatches={nameMatches}\n        fallBackName={fallbackUserName}\n        areaCode={this.props.areaCode}\n        countryCode={this.props.countryCode}\n        selectedMatcherIndex={this.state.selectedMatcherIndex}\n        onSelectMatcherName={this.onSelectMatcherName}\n        avatarUrl={this.state.avatarUrl}\n      >\n        {this.props.children}\n      </ActiveCallPanel>\n    );\n  }\n}\n\nActiveCallPage.propTypes = {\n  session: PropTypes.shape({\n    id: PropTypes.string,\n    direction: PropTypes.string,\n    startTime: PropTypes.number,\n    isOnMute: PropTypes.bool,\n    isOnHold: PropTypes.bool,\n    isOnRecord: PropTypes.bool,\n    to: PropTypes.string,\n    from: PropTypes.string,\n  }).isRequired,\n  currentLocale: PropTypes.string.isRequired,\n  minimized: PropTypes.bool.isRequired,\n  toggleMinimized: PropTypes.func.isRequired,\n  onMute: PropTypes.func.isRequired,\n  onUnmute: PropTypes.func.isRequired,\n  onHold: PropTypes.func.isRequired,\n  onUnhold: PropTypes.func.isRequired,\n  onRecord: PropTypes.func.isRequired,\n  onStopRecord: PropTypes.func.isRequired,\n  hangup: PropTypes.func.isRequired,\n  answer: PropTypes.func.isRequired,\n  reject: PropTypes.func.isRequired,\n  sendDTMF: PropTypes.func.isRequired,\n  toVoiceMail: PropTypes.func.isRequired,\n  replyWithMessage: PropTypes.func.isRequired,\n  formatPhone: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n  children: PropTypes.node,\n  toMatches: PropTypes.array.isRequired,\n  fromMatches: PropTypes.array.isRequired,\n  areaCode: PropTypes.string.isRequired,\n  countryCode: PropTypes.string.isRequired,\n  getAvatarUrl: PropTypes.func.isRequired,\n  forwardingNumbers: PropTypes.array.isRequired,\n  onForward: PropTypes.func.isRequired,\n};\n\nActiveCallPage.defaultProps = {\n  children: undefined,\n};\n\nfunction mapToProps(_, {\n  webphone,\n  locale,\n  contactMatcher,\n  regionSettings,\n  forwardingNumber,\n}) {\n  const currentSession = webphone.currentSession || {};\n  const contactMapping = contactMatcher && contactMatcher.dataMapping;\n  return {\n    fromMatches: (contactMapping && contactMapping[currentSession.from]) || [],\n    toMatches: (contactMapping && contactMapping[currentSession.to]) || [],\n    currentLocale: locale.currentLocale,\n    session: currentSession,\n    minimized: webphone.minimized,\n    areaCode: regionSettings.areaCode,\n    countryCode: regionSettings.countryCode,\n    forwardingNumbers: forwardingNumber.forwardingNumbers,\n  };\n}\n\nfunction mapToFunctions(_, {\n  webphone,\n  regionSettings,\n  router,\n  getAvatarUrl,\n}) {\n  return {\n    formatPhone: phoneNumber => formatNumber({\n      phoneNumber,\n      areaCode: regionSettings.areaCode,\n      countryCode: regionSettings.countryCode,\n    }),\n    hangup: sessionId => webphone.hangup(sessionId),\n    answer: sessionId => webphone.answer(sessionId),\n    reject: sessionId => webphone.reject(sessionId),\n    onMute: sessionId => webphone.mute(sessionId),\n    onUnmute: sessionId => webphone.unmute(sessionId),\n    onHold: sessionId => webphone.hold(sessionId),\n    onUnhold: sessionId => webphone.unhold(sessionId),\n    onRecord: sessionId => webphone.startRecord(sessionId),\n    onStopRecord: sessionId => webphone.stopRecord(sessionId),\n    onAdd: () => {\n      router.push('/dialer');\n      webphone.toggleMinimized();\n    },\n    sendDTMF: (value, sessionId) => webphone.sendDTMF(value, sessionId),\n    toVoiceMail: sessionId => webphone.toVoiceMail(sessionId),\n    onForward: (sessionId, forwardNumber) => webphone.forward(sessionId, forwardNumber),\n    replyWithMessage: (sessionId, message) => webphone.replyWithMessage(sessionId, message),\n    toggleMinimized: () => webphone.toggleMinimized(),\n    getAvatarUrl,\n  };\n}\n\nconst ActiveCallContainer = connect(\n  mapToProps,\n  mapToFunctions,\n)(ActiveCallPage);\n\nActiveCallContainer.propTypes = {\n  webphone: PropTypes.instanceOf(Webphone).isRequired,\n  locale: PropTypes.instanceOf(Locale).isRequired,\n  regionSettings: PropTypes.instanceOf(RegionSettings).isRequired,\n  forwardingNumber: PropTypes.instanceOf(ForwardingNumber).isRequired,\n  getAvatarUrl: PropTypes.func,\n};\n\nActiveCallContainer.defaultProps = {\n  getAvatarUrl: () => null,\n};\n\nexport default ActiveCallContainer;\n\n"]}