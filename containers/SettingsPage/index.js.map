{"version":3,"sources":["containers/SettingsPage/index.js"],"names":["mapToProps","_","accountInfo","auth","brand","extensionInfo","locale","regionSettings","callingSettings","version","rolesAndPermissions","presence","params","loginNumber","loggedIn","loginStatus","ready","extensionNumber","phoneNumber","mainCompanyNumber","join","countryCode","areaCode","showSpinner","showRegion","id","availableCountries","length","find","c","isoCode","currentLocale","brandId","ringoutEnabled","outboundSMS","permissions","OutboundSMS","InternalSMS","isCallQueueMember","dndStatus","userStatus","showPresenceSettings","mapToFunctions","router","regionSettingsUrl","callingSettingsUrl","onLogoutButtonClick","logout","onRegionSettingsLinkClick","push","onCallingSettingsLinkClick","setAvailable","setBusy","setDoNotDisturb","setInvisible","toggleAcceptCallQueueCalls","SettingsPage","propTypes","instanceOf","isRequired","string","object","default"],"mappings":"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","file":"index.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport loginStatus from 'ringcentral-integration/modules/Auth/loginStatus';\nimport formatNumber from 'ringcentral-integration/lib/formatNumber';\nimport AccountInfo from 'ringcentral-integration/modules/AccountInfo';\nimport Auth from 'ringcentral-integration/modules/Auth';\nimport Brand from 'ringcentral-integration/modules/Brand';\nimport ExtensionInfo from 'ringcentral-integration/modules/ExtensionInfo';\nimport Locale from 'ringcentral-integration/modules/Locale';\nimport RegionSettings from 'ringcentral-integration/modules/RegionSettings';\nimport RolesAndPermissions from 'ringcentral-integration/modules/RolesAndPermissions';\nimport Presence from 'ringcentral-integration/modules/Presence';\nimport Router from '../../modules/RouterInteraction';\n\nimport SettingsPanel from '../../components/SettingsPanel';\n\nfunction mapToProps(_, {\n  accountInfo,\n  auth,\n  brand,\n  extensionInfo,\n  locale,\n  regionSettings,\n  callingSettings,\n  version,\n  rolesAndPermissions,\n  presence,\n  params,\n}) {\n  let loginNumber = '';\n  const loggedIn = auth.loginStatus === loginStatus.loggedIn;\n  if (\n    loggedIn &&\n    accountInfo.ready &&\n    extensionInfo.ready\n  ) {\n    // If no extensionNumber, extensionNumber field needs to be omitted\n    const extensionNumber = extensionInfo.extensionNumber &&\n      extensionInfo.extensionNumber !== '0' ? extensionInfo.extensionNumber : null;\n    const phoneNumber = [accountInfo.mainCompanyNumber, extensionNumber].join('*');\n    loginNumber = formatNumber({\n      phoneNumber: phoneNumber,\n      countryCode: regionSettings.countryCode,\n      areaCode: regionSettings.areaCode,\n    });\n  }\n  return {\n    showSpinner: !(\n      accountInfo.ready &&\n      auth.ready &&\n      loggedIn &&\n      extensionInfo.ready &&\n      locale.ready &&\n      regionSettings.ready &&\n      callingSettings.ready &&\n      rolesAndPermissions.ready &&\n      presence.ready\n    ),\n    showRegion: loggedIn && brand.id === '1210' && (\n      regionSettings.availableCountries.length > 1 ||\n      !!regionSettings.availableCountries.find(c => c.isoCode === 'US') ||\n      !!regionSettings.availableCountries.find(c => c.isoCode === 'CA')\n    ),\n    loginNumber,\n    version,\n    currentLocale: locale.currentLocale,\n    brandId: brand.id,\n    ringoutEnabled: rolesAndPermissions.ringoutEnabled,\n    outboundSMS: !!rolesAndPermissions.permissions.OutboundSMS ||\n    !!rolesAndPermissions.permissions.InternalSMS,\n    isCallQueueMember: extensionInfo.isCallQueueMember,\n    dndStatus: presence && presence.dndStatus,\n    userStatus: presence && presence.userStatus,\n    showPresenceSettings: !!(params && params.showPresenceSettings),\n  };\n}\n\nfunction mapToFunctions(_, {\n  auth,\n  presence,\n  router,\n  regionSettingsUrl,\n  callingSettingsUrl,\n}) {\n  return {\n    onLogoutButtonClick: async () => {\n      await auth.logout();\n    },\n    onRegionSettingsLinkClick: () => {\n      router.push(regionSettingsUrl);\n    },\n    onCallingSettingsLinkClick: () => {\n      router.push(callingSettingsUrl);\n    },\n    setAvailable: (...args) => (presence && presence.setAvailable(...args)),\n    setBusy: (...args) => (presence && presence.setBusy(...args)),\n    setDoNotDisturb: (...args) => (presence && presence.setDoNotDisturb(...args)),\n    setInvisible: (...args) => (presence && presence.setInvisible(...args)),\n    toggleAcceptCallQueueCalls: (...args) => (\n      presence && presence.toggleAcceptCallQueueCalls(...args)\n    ),\n  };\n}\nconst SettingsPage = connect(\n  mapToProps,\n  mapToFunctions,\n)(SettingsPanel);\n\nconst propTypes = {\n  accountInfo: PropTypes.instanceOf(AccountInfo).isRequired,\n  auth: PropTypes.instanceOf(Auth).isRequired,\n  brand: PropTypes.instanceOf(Brand).isRequired,\n  extensionInfo: PropTypes.instanceOf(ExtensionInfo).isRequired,\n  locale: PropTypes.instanceOf(Locale).isRequired,\n  regionSettings: PropTypes.instanceOf(RegionSettings).isRequired,\n  callingSettingsUrl: PropTypes.string.isRequired,\n  regionSettingsUrl: PropTypes.string.isRequired,\n  version: PropTypes.string.isRequired,\n  rolesAndPermissions: PropTypes.instanceOf(RolesAndPermissions).isRequired,\n  presence: PropTypes.instanceOf(Presence),\n  router: PropTypes.instanceOf(Router),\n  callingSettings: PropTypes.object.isRequired,\n};\n\nSettingsPage.propTypes = propTypes;\n\nexport {\n  mapToFunctions,\n  mapToProps,\n  propTypes,\n  SettingsPage as default,\n};\n"]}